{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Cursor-Utils","text":""},{"location":"index.html#give-your-cursor-agents-superpowers","title":"Give your Cursor Agents superpowers.","text":"<p>Install Cursor Utils </p>"},{"location":"index.html#what-is-cursor-utils","title":"What is Cursor Utils?","text":"<p>Cursor is already an amazing tool for developers. Cursor-Utils extends your existing agents with new skills and advanced features via:</p> <ul> <li> <p> Google Gemini</p> <p>2M token ENTIRE codebase contextual memory.  Grounding &amp; reasoning.</p> <p> Gemini</p> </li> <li> <p> Perplexity</p> <p>AI guided deep web research, without the  risk of hallucinations.</p> <p> Perplexity</p> </li> <li> <p> Local &amp; Remote Repo Analysis</p> <p>Complex &amp; Context aware agent codebase analysis and dev workflow.</p> <p> Repo</p> </li> <li> <p> GitHub</p> <p>Agentic &amp; autonomous Github repository mgmt. and maint.</p> <p> GitHub</p> </li> </ul> <p>All of this functionality is exposed through a clean, intuitive CLI designed to be used by your existing Cursor Agents.</p>"},{"location":"index.html#asking-perplexity-to-perform-ai-guided-web-research","title":"Asking Perplexity to perform ai guided web research","text":"Example"},{"location":"index.html#see-what-happens-next","title":"See what happens next...","text":"Example"},{"location":"index.html#asking-gemini-for-a-plan","title":"Asking Gemini for a plan","text":"Example"},{"location":"index.html#performing-repository-analysis","title":"Performing repository analysis","text":"Example"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>To get started with Cursor-Utils, follow these steps:</p> Note <p>We designed cursor-utils to be used by Cursor Agents. Therefore there's really nothing else you need to do besides configuring the api keys. </p> <p>However if you want to explore the available commands and their options, you can do so.</p> <ol> <li>Read the installation guide to set up Cursor-Utils</li> <li>Explore the usage documentation for detailed usage patterns</li> <li>Learn about configuration options to customize your experience</li> </ol>"},{"location":"index.html#why-cursor-utils","title":"Why Cursor-Utils?","text":"<p>Our Benchmarks speak for themselves. Extensive benchmarking and profiling reflect:</p> <ul> <li> <p>an 87.8% increase in Cursor Agent Accuracy, Correctness, and Quality of answers using only Zero Shot Prompting &amp; Cursor-Utils.</p> </li> <li> <p>a 98.2% increase in developer workflow productivity using only Cursor IDE &amp; Cursor-Utils. </p> </li> </ul> <p>Cursor-Utils addresses common challenges in the development workflow:</p> <ul> <li>Reducing Context Switching: Get answers directly in your terminal without switching to a browser</li> <li>Accelerating Onboarding: Quickly understand new codebases with AI-powered analysis</li> <li>Streamlining Research: Find relevant information faster with intelligent web search</li> <li>Enhancing Productivity: Automate documentation, code generation, and GitHub tasks</li> <li>Improving Collaboration: Share standardized insights and documentation with team members</li> </ul>"},{"location":"index.html#example-workflow","title":"Example Workflow","text":""},{"location":"index.html#simply-ask-your-cursor-agent-to","title":"Simply ask your Cursor Agent to:","text":"<pre><code># Analyze a new codebase you're working with\nUse cursor-utils repo https://github.com/organization/project \"Explain the authentication system\"\n</code></pre> <pre><code># Research a technical concept\nAsk Perplexity about \"Best practices for GraphQL error handling\"\n</code></pre> <pre><code># Generate a code snippet for your current project\nAsk Gemini to \"Write a Python function to validate JWT tokens\"\n</code></pre> <pre><code># Create an issue based on your findings\nUse cursor-utils github to create-issue --owner your-org --repo your-repo --title \"Improve JWT validation\"\n</code></pre>"},{"location":"index.html#community-and-support","title":"Community and Support","text":"<ul> <li>Contributing guidelines for developers interested in enhancing Cursor-Utils</li> <li>License information for usage terms and conditions </li> </ul>"},{"location":"contributing.html","title":"Contributing to Cursor-Utils","text":"<p>Thank you for your interest in contributing to Cursor-Utils! This guide will help you get started with the development process and outline our standards and expectations.</p>"},{"location":"contributing.html#development-setup","title":"Development Setup","text":""},{"location":"contributing.html#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.8 or newer</li> <li>Git</li> <li>A text editor or IDE (VS Code, PyCharm, etc.)</li> <li>UV package manager (recommended)</li> </ul>"},{"location":"contributing.html#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Fork the repository</li> </ol> <p>Start by forking the Cursor-Utils repository on GitHub.</p> <ol> <li>Clone your fork</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/cursor-utils.git\ncd cursor-utils\n</code></pre> <ol> <li>Create a virtual environment</li> </ol> <p>Using UV (recommended):    <pre><code>uv venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> <p>Using standard venv:    <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> <ol> <li>Install development dependencies</li> </ol> <p>Using UV:    <pre><code>uv pip install -e \".[dev]\"\n</code></pre></p> <p>Using pip:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> <ol> <li>Install pre-commit hooks</li> </ol> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing.html#development-workflow","title":"Development Workflow","text":""},{"location":"contributing.html#creating-a-new-feature","title":"Creating a New Feature","text":"<ol> <li>Create a new branch</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Implement your changes</li> </ol> <p>Follow the coding standards and ensure your code is well-tested.</p> <ol> <li>Run the tests</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Update documentation</li> </ol> <p>If your changes affect the user interface or behavior, update the relevant documentation.</p> <ol> <li>Commit your changes</li> </ol> <pre><code>git add .\ngit commit -m \"Feature: Add your feature description\"\n</code></pre> <ol> <li>Push your changes</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Create a pull request</li> </ol> <p>Go to the GitHub repository and create a pull request from your branch to the main branch.</p>"},{"location":"contributing.html#fixing-a-bug","title":"Fixing a Bug","text":"<ol> <li>Create a new branch</li> </ol> <pre><code>git checkout -b fix/bug-description\n</code></pre> <ol> <li>Implement your fix</li> </ol> <p>Ensure you include tests that reproduce the bug and verify your fix.</p> <ol> <li>Run the tests</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit your changes</li> </ol> <pre><code>git add .\ngit commit -m \"Fix: Description of the bug fix\"\n</code></pre> <ol> <li>Push your changes</li> </ol> <pre><code>git push origin fix/bug-description\n</code></pre> <ol> <li>Create a pull request</li> </ol> <p>Go to the GitHub repository and create a pull request from your branch to the main branch.</p>"},{"location":"contributing.html#coding-standards","title":"Coding Standards","text":""},{"location":"contributing.html#python-style","title":"Python Style","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use Black for code formatting</li> <li>Use isort for import sorting</li> <li>Use Ruff for linting</li> </ul>"},{"location":"contributing.html#type-annotations","title":"Type Annotations","text":"<ul> <li>Use type annotations for all function parameters and return values</li> <li>Follow PEP 484 for type hints</li> <li>Use PyRight for type checking</li> </ul>"},{"location":"contributing.html#documentation","title":"Documentation","text":"<ul> <li>Document all public functions, classes, and methods</li> <li>Follow Google style docstrings</li> <li>Keep documentation up to date with code changes</li> <li>Include examples where appropriate</li> </ul>"},{"location":"contributing.html#testing","title":"Testing","text":"<ul> <li>Write unit tests for all new functionality</li> <li>Aim for high test coverage, especially for core functionality</li> <li>Use pytest as the testing framework</li> <li>Mock external services in tests</li> </ul>"},{"location":"contributing.html#commits","title":"Commits","text":"<ul> <li>Use conventional commit messages:</li> <li><code>Feature:</code> for new features</li> <li><code>Fix:</code> for bug fixes</li> <li><code>Docs:</code> for documentation changes</li> <li><code>Test:</code> for tests</li> <li><code>Refactor:</code> for code refactoring</li> <li><code>Chore:</code> for maintenance tasks</li> <li>Keep commits focused and atomic</li> <li>Reference issue numbers in commit messages where applicable</li> </ul>"},{"location":"contributing.html#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fill in the pull request template with all relevant information</li> <li>Ensure all checks pass (tests, linting, etc.)</li> <li>Request a review from a maintainer</li> <li>Address review feedback promptly</li> <li>Update documentation if necessary</li> <li>Squash commits if requested by the reviewer</li> </ol>"},{"location":"contributing.html#adding-a-new-command","title":"Adding a New Command","text":"<p>To add a new command to Cursor-Utils:</p> <ol> <li>Create a new command file in <code>src/cursor_utils/cli/commands/</code></li> <li>Implement the command following the existing command pattern</li> <li>Register the command in <code>src/cursor_utils/cli/parser.py</code></li> <li>Add tests for the new command</li> <li>Document the command in the appropriate documentation files</li> </ol>"},{"location":"contributing.html#integrating-with-external-services","title":"Integrating with External Services","text":"<p>When adding a new service integration:</p> <ol> <li>Create a service client in <code>src/cursor_utils/services/</code></li> <li>Implement authentication using Configuration for API keys</li> <li>Handle errors appropriately using the error handling system</li> <li>Add tests with mocked API responses</li> <li>Document the service in the appropriate documentation files</li> </ol>"},{"location":"contributing.html#release-process","title":"Release Process","text":"<p>Cursor-Utils follows Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for new functionality in a backward-compatible manner</li> <li>PATCH version for backward-compatible bug fixes</li> </ul> <p>The release process is as follows:</p> <ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md with the changes in the new version</li> <li>Create a pull request for the version bump</li> <li>Merge the pull request once approved</li> <li>Create a tag for the new version</li> <li>Build and publish the package to PyPI</li> </ol>"},{"location":"contributing.html#getting-help","title":"Getting Help","text":"<p>If you need help with the development process:</p> <ul> <li>Check the documentation in the <code>docs/</code> directory</li> <li>Open an issue with a question or discussion topic</li> <li>Reach out to the maintainers directly</li> </ul>"},{"location":"contributing.html#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and constructive in your interactions with other contributors. We aim to foster an inclusive and welcoming community for all developers. </p>"},{"location":"installation.html","title":"Installation","text":""},{"location":"installation.html#installation-guide","title":"Installation Guide","text":"<p>This guide provides detailed instructions for installing and configuring Cursor-Utils on various platforms.</p> <p>Install Cursor Utils </p> pipuvpoetrypipx <pre><code>pip install cursor-utils\n</code></pre> <pre><code>uv pip install cursor-utils  # Recommended\n</code></pre> <pre><code>poetry add cursor-utils\n</code></pre> <p>For a clean, isolated installation:</p> <pre><code>pipx install cursor-utils\n</code></pre> <p>If you don't have pipx installed:</p> <pre><code>pip install pipx\npipx ensurepath\npipx install cursor-utils\n</code></pre>"},{"location":"installation.html#verifying-installation","title":"Verifying Installation","text":"<p>To verify that Cursor-Utils has been installed correctly:</p> <pre><code>cursor-utils --version\n</code></pre> <p>This should display the version number of the installed package.</p>"},{"location":"installation.html#upgrading-your-cursor-agent","title":"Upgrading your Cursor Agent","text":"<p>By now, you should have Cursor-Utils installed in your environment. Now its time to upgrade your Cursor Agent and install the latest version of Cursor-Utils in the current repo / project / directory:</p> Warning <p>Even tho you have installed the latest version of Cursor-Utils in your environment, each time you start a new Cursor workspace, you need to run the <code>cursor-utils install .</code> command to install the latest version of Cursor-Utils in the current repo / project / directory.</p> <p><pre><code>cursor-utils install .\n</code></pre> After running this command, your Cursor Agent will be updated with the new tools and commands. The command will also kickoff the api key setup process.</p> Info <p>Please note the <code>.</code> is required to install the agent in the current repo / project / directory.</p>"},{"location":"installation.html#api-key-setup","title":"API Key Setup","text":"<p>Cursor-Utils requires API keys for certain commands. Set up these keys using the <code>config</code> command:</p> GeminiPerplexityGitHub <ol> <li>Visit Google AI Studio to obtain a Gemini API key</li> <li>Configure the key in Cursor-Utils:</li> </ol> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre> <ol> <li>Get a Perplexity API key from Perplexity API docs</li> <li>Configure the key:</li> </ol> <pre><code>cursor-utils config set perplexity_api_key YOUR_PERPLEXITY_API_KEY\n</code></pre> <p>For GitHub integration, you need a GitHub Personal Access Token:</p> <ol> <li>Create a token at GitHub Settings &gt; Developer settings &gt; Personal access tokens</li> <li>Configure the token:</li> </ol> <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre>"},{"location":"installation.html#updating-cursor-utils","title":"Updating Cursor-Utils","text":"<p>To update to the latest version:</p> <pre><code>cursor-utils update\n</code></pre>"},{"location":"installation.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation.html#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"installation.html#permission-errors","title":"Permission Errors","text":"<p>If you encounter permission errors during installation:</p> <pre><code>pip install --user cursor-utils\n</code></pre>"},{"location":"installation.html#dependency-conflicts","title":"Dependency Conflicts","text":"<p>If you experience dependency conflicts:</p> <pre><code>pip install --upgrade pip\npip install cursor-utils --ignore-installed\n</code></pre>"},{"location":"installation.html#path-issues","title":"Path Issues","text":"<p>If the <code>cursor-utils</code> command is not found after installation:</p> <ol> <li>Ensure Python's bin directory is in your PATH</li> <li>For user installations, verify that <code>~/.local/bin</code> is in your PATH</li> </ol> <p>Add to your shell profile (~/.bashrc, ~/.zshrc, etc.):</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"installation.html#getting-help","title":"Getting Help","text":"<p>If you continue to experience issues:</p> <ol> <li>Check the GitHub repository for known issues</li> <li>Verify system requirements are met</li> <li>Try installation in a clean virtual environment</li> <li>Consult the advanced documentation at https://gweidart.github.io/cursor-utils/</li> </ol>"},{"location":"license.html","title":"License Information","text":"<p>Cursor-Utils is released under the MIT License, a permissive open-source license that allows for free use, modification, and distribution of the software.</p>"},{"location":"license.html#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2023-2024 Cursor-Utils Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"license.html#what-this-means","title":"What This Means","text":"<p>The MIT License grants you the following permissions:</p> <ul> <li>Use the software for any purpose</li> <li>Modify the source code</li> <li>Distribute the software or your modified versions</li> <li>Sublicense or sell the software</li> </ul> <p>With these requirements:</p> <ul> <li>Include the original copyright notice</li> <li>Include the permission notice</li> </ul>"},{"location":"license.html#third-party-components","title":"Third-Party Components","text":"<p>Cursor-Utils incorporates several third-party libraries and components, each with its own license:</p> Component License Usage Click BSD 3-Clause Command-line interface framework Rich MIT Terminal formatting and output Requests Apache 2.0 HTTP requests for API interactions PyYAML MIT Configuration file processing GitPython BSD 3-Clause Git repository interactions"},{"location":"license.html#api-service-terms","title":"API Service Terms","text":"<p>When using Cursor-Utils with external APIs, you are subject to the terms of service for those APIs:</p> <ul> <li>Google Gemini API: Subject to Google AI Studio Terms</li> <li>Perplexity API: Subject to Perplexity API Terms</li> <li>GitHub API: Subject to GitHub Terms of Service</li> </ul> <p>It is your responsibility to ensure that your usage of these services complies with their respective terms.</p>"},{"location":"license.html#contributing","title":"Contributing","text":"<p>When you contribute to Cursor-Utils, you agree that your contributions will be licensed under the same MIT License. This allows us to maintain a consistent licensing model for the entire project.</p>"},{"location":"license.html#questions","title":"Questions","text":"<p>If you have questions about licensing or need clarification on permitted usage, please open an issue on our GitHub repository. </p>"},{"location":"usage.html","title":"Usage","text":""},{"location":"usage.html#usage-guide","title":"Usage Guide","text":"<p>This guide provides detailed information on how to use Cursor-Utils effectively for various development tasks.</p> Info <p>We designed cursor-utils and its commands to be used by your Cursor Agent's via terminal commands. Nonetheless, i have included a fully featured, user friendly CLI interface. Therefore, you can run all cursor-utils commands manually yourself if you wish.</p>"},{"location":"usage.html#command-line-interface","title":"Command-Line Interface","text":"<p>Cursor-Utils provides a consistent command-line interface with a focus on ease of use. You really only need to know a few phrases. Let your Cursor Agent worry about executing the commands and their arguments / options / parameters. while in an Agent Chat use the following phrases:</p> <pre><code>- `Ask Gemini`\n- `Ask Perplexity`\n- `Use cursor-utils &lt;command&gt;`\n</code></pre> Core Commands <ul> <li><code>repo</code></li> <li><code>gemini</code> (Ask Gemini)</li> <li><code>project</code></li> <li><code>web</code> (Ask Perplexity)</li> <li><code>github</code></li> <li><code>config</code></li> <li><code>update</code></li> </ul> <p>You will need to configure API keys for the commands that rely on external services before you can use them. We suggest you do this via the <code>config</code> command manually so that you dont expose your API key in your chat history.</p>"},{"location":"usage.html#api-key-setup","title":"API Key Setup","text":"<p>To manually configure your API keys you can use the following workflow:</p> GeminiPerplexityGitHub <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre> <pre><code>cursor-utils config set perplexity_api_key YOUR_PERPLEXITY_API_KEY\n</code></pre> <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre>"},{"location":"usage.html#common-workflows","title":"Common Workflows","text":""},{"location":"usage.html#simply-ask-your-cursor-agent-to","title":"Simply ask your Cursor Agent to:","text":"<pre><code>Use cursor-utils repo https://github.com/user/repo to give me an overview of the repo then\nAsk Gemini \"Based on that repo analysis, how would I implement feature X?\"\n</code></pre>"},{"location":"usage.html#code-understanding","title":"Code Understanding","text":"<p>Quickly understand unfamiliar codebases:</p> <pre><code># Analyze a local project\nUse cursor-utils project /path/to/project \"Explain the main components\"\n\n# Analyze a remote repository\nUse cursor-utils repo https://github.com/organization/repo \"How does the authentication system work?\"\n</code></pre>"},{"location":"usage.html#content-generation","title":"Content Generation","text":"<p>Generate code, documentation, or explanations:</p> <pre><code># Generate a Python function\nAsk Gemini to \"Write a Python function to calculate Fibonacci numbers\"\n\n# Create project documentation\nAsk Gemini to \"Generate API documentation for this endpoint: GET /api/users/:id\"\n\n# Explain complex concepts\nAsk Gemini to \"Explain OAuth 2.0 authorization flow\"\n</code></pre>"},{"location":"usage.html#technical-research","title":"Technical Research","text":"<p>Find solutions and documentation:</p> <pre><code># Research best practices\nAsk Perplexity about \"Best practices for React state management\"\n\n# Find documentation examples\nAsk Perplexity about \"How to implement pagination in GraphQL\"\n\n# Solve technical problems\nAsk Perplexity about \"Fix Docker container networking issues\"\n</code></pre>"},{"location":"usage.html#github-workflows","title":"GitHub Workflows","text":"<p>Manage GitHub repositories from the terminal:</p> <pre><code># Get repository information\nUse cursor-utils github repo --owner microsoft --repo vscode\n\n# List open issues\nUse cursor-utils github issues --owner microsoft --repo vscode\n\n# Create an issue\nUse cursor-utils github create-issue --owner your-username --repo your-repo --title \"Bug: Application crashes\"\n</code></pre>"},{"location":"usage.html#combination-workflows","title":"Combination workflows","text":"<p>Commands can be combined for powerful workflows:</p> <p>simply ask your Cursor Agent to:</p> <pre><code># Analyze a repository, then ask specific questions\nUse cursor-utils repo https://github.com/user/repo to give me an overview of the repo then\nAsk Gemini \"Based on that repo analysis, how would I implement feature X?\"\n</code></pre> <pre><code># Search for information, then apply to your project\nAsk Perplexity to research best practices for API security then\nuse cursor-utils project to \"audit my API endpoints for security issues\"\n</code></pre>"},{"location":"usage.html#command-specific-examples","title":"Command Specific Examples:","text":""},{"location":"usage.html#ask-gemini-command","title":"Ask Gemini Command:","text":"<p>The <code>Ask Gemini</code> command allows your Cursor Agents to take full advantage of Gemini's industry leading 2 Million token context window to query and collaborate back and forth allowing agents to iterate and refine thier answers before bringing you an even more polished result.</p> <ul> <li> <p>Use the <code>--system</code> option to guide the model's behavior:   <pre><code>Ask Gemini --system \"You are a security expert\" \"Review this code for vulnerabilities\"\n</code></pre></p> </li> <li> <p>Adjust temperature for more or less creative outputs:   <pre><code>Ask Gemini to --temperature 0.8 \"Generate test cases for this function\"\n</code></pre></p> </li> </ul>"},{"location":"usage.html#ask-perplexity-command","title":"Ask Perplexity Command:","text":"<ul> <li>Use specific models for different types of queries:   <pre><code>Ask Perplexity about --model sonar-reasoning \"Compare serverless architectures\"\n</code></pre></li> </ul>"},{"location":"usage.html#project-command","title":"Project Command","text":"<ul> <li> <p>Limit the number of files for faster analysis:   <pre><code>Use cursor-utils project . --max-files 20 \"Find performance bottlenecks\"\n</code></pre></p> </li> <li> <p>Focus on specific directories:   <pre><code>Use cursor-utils project ./src \"Explain the data flow\"\n</code></pre></p> </li> </ul>"},{"location":"usage.html#repo-command","title":"Repo Command","text":"<ul> <li> <p>Limit the number of files for faster analysis:   <pre><code>Use cursor-utils repo https://github.com/user/repo --max-files 20 \"Find performance bottlenecks\"\n</code></pre></p> </li> <li> <p>Focus on specific directories:   <pre><code>Use cursor-utils repo https://github.com/user/repo ./src \"Explain the data flow\"\n</code></pre></p> </li> <li> <p>Use specific models for different types of queries:   <pre><code>Use cursor-utils repo https://github.com/user/repo --model gemini-2.0-pro-exp \"Find performance bottlenecks\"\n</code></pre></p> </li> </ul>"},{"location":"usage.html#github-command","title":"GitHub Command","text":"<p>Collab with your Cursor Agents and let them take care of tasks you dont want to. Simply tell your Cursor Agent to use cursor-utils github to help you wwith pretty much anything &amp; everything regarding GitHub repo mgmt:</p> <pre><code>Use cursor-utils github to help me create a new repo named \"my-new-repo\"\n</code></pre> <pre><code>Use cursor-utils github to help me create a new issue in repo \"my-repo\"\n</code></pre> <pre><code>Use cursor-utils github to help me create a new branch named \"my-new-branch\"\n</code></pre> <pre><code>Use cursor-utils github to help me create a new pull request in repo \"my-repo\"\n</code></pre>"},{"location":"usage.html#environment-variables","title":"Environment Variables","text":"<p>Cursor-Utils supports configuration via environment variables:</p> <ul> <li><code>CURSOR_UTILS_GEMINI_API_KEY</code>: Google Gemini API key</li> <li><code>CURSOR_UTILS_PERPLEXITY_API_KEY</code>: Perplexity API key</li> <li><code>CURSOR_UTILS_GITHUB_TOKEN</code>: GitHub access token</li> <li><code>CURSOR_UTILS_DEFAULT_FORMAT</code>: Default output format</li> <li><code>CURSOR_UTILS_DEBUG</code>: Enable debug mode (set to 1)</li> </ul> <p>Example:</p> <pre><code>export CURSOR_UTILS_DEFAULT_FORMAT=markdown\nAsk Gemini to \"Write a Python class for handling HTTP requests\"\n</code></pre>"},{"location":"usage.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific with Queries: More specific queries yield better results    <pre><code># Less effective\nAsk Perplexity \"Docker\"\n\n# More effective\nAsk Perplexity about \"Docker multi-stage build optimization techniques\"\n</code></pre></p> </li> <li> <p>Choose the Right Model: Different models have different strengths    <pre><code># For creative content\nAsk Gemini to --model gemini-2.0-pro-exp \"Generate test scenarios\"\n\n# For factual research\nAsk Perplexity about --model sonar-reasoning \"Explain ACID properties\"\n</code></pre></p> </li> <li> <p>Use Output Redirection: Save results to files when needed    <pre><code>Ask Gemini to --format markdown \"Write documentation for API endpoints\" &gt; api-docs.md\n</code></pre></p> </li> </ol>"},{"location":"usage.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage.html#rate-limiting","title":"Rate Limiting","text":"<p>If you encounter rate limiting issues:</p> <ol> <li>Check your API usage and limits</li> <li>Implement delays between requests in scripts</li> <li>Consider upgrading your API tier if available</li> </ol>"},{"location":"usage.html#slow-responses","title":"Slow Responses","text":"<p>For large repositories or complex queries:</p> <ol> <li>Limit analysis scope with <code>--max-files</code></li> <li>Use more specific queries</li> <li>Split complex queries into smaller, focused questions</li> </ol>"},{"location":"usage.html#authentication-issues","title":"Authentication Issues","text":"<p>If experiencing authentication problems:</p> <ol> <li>Verify API keys are correctly configured</li> <li>Ensure keys haven't expired</li> <li>Check your network connection and proxy settings</li> </ol> <p>For persistent issues, refer to the advanced documentation or check the GitHub repository for known issues and solutions. </p>"},{"location":"api/index.html","title":"Overview","text":""},{"location":"api/index.html#api-reference","title":"API Reference","text":"<p>This section provides detailed documentation for all Cursor-Utils commands, their options, arguments, and usage patterns.</p>"},{"location":"api/index.html#command-overview","title":"Command Overview","text":"<p>Cursor-Utils provides the following core commands:</p> Command Description Primary Use Cases <code>config</code> Manage configuration settings Setting API keys, viewing/updating configurations <code>gemini</code> Generate content with Google's Gemini AI Code generation, explanations, documentation <code>github</code> Interact with GitHub repositories Repository management, issue tracking, PR creation <code>web</code> Perform web research using Perplexity AI Technical research, documentation lookup, problem-solving <code>project</code> Analyze local project code Code understanding, architecture analysis, onboarding <code>repo</code> Analyze remote code repositories Open-source exploration, dependency evaluation"},{"location":"api/index.html#command-structure","title":"Command Structure","text":"<p>All Cursor-Utils commands follow a consistent structure:</p> <pre><code>cursor-utils [COMMAND] [SUBCOMMAND] [OPTIONS] [ARGUMENTS]\n</code></pre>"},{"location":"api/index.html#global-options","title":"Global Options","text":"<p>These options are available across all commands:</p> Option Description Example <code>--help</code> Display help information <code>cursor-utils --help</code> <code>--version</code> Show version information <code>cursor-utils --version</code> <code>--format</code> Specify output format <code>cursor-utils --format json</code> <code>--debug</code> Enable debug output <code>cursor-utils --debug</code>"},{"location":"api/index.html#output-formats","title":"Output Formats","text":"<p>All commands support the following output formats:</p> Format Description Best For <code>rich</code> Colored and formatted terminal output Interactive use <code>plain</code> Simple text without formatting Log files, piping to other commands <code>markdown</code> Markdown formatted text Documentation, note-taking <code>json</code> Structured JSON data Programmatic use, automation"},{"location":"api/index.html#command-details","title":"Command Details","text":"<p>For detailed documentation on each command, refer to the specific command pages:</p>"},{"location":"api/index.html#config-command","title":"<code>config</code> Command","text":"<p>The <code>config</code> command manages persistent configuration settings, particularly API keys.</p> <pre><code>cursor-utils config {get|set|delete|list} [KEY] [VALUE]\n</code></pre>"},{"location":"api/index.html#gemini-command","title":"<code>gemini</code> Command","text":"<p>The <code>gemini</code> command generates content using Google's Gemini AI models.</p> <pre><code>cursor-utils gemini [OPTIONS] PROMPT\n</code></pre>"},{"location":"api/index.html#github-command","title":"<code>github</code> Command","text":"<p>The <code>github</code> command provides tools for interacting with GitHub repositories.</p> <pre><code>cursor-utils github COMMAND [OPTIONS]\n</code></pre>"},{"location":"api/index.html#web-command","title":"<code>web</code> Command","text":"<p>The <code>web</code> command searches the web using Perplexity AI to provide curated results.</p> <pre><code>cursor-utils web [OPTIONS] QUERY\n</code></pre>"},{"location":"api/index.html#project-command","title":"<code>project</code> Command","text":"<p>The <code>project</code> command analyzes local project code using Gemini AI.</p> <pre><code>cursor-utils project [OPTIONS] PROJECT_PATH QUERY\n</code></pre>"},{"location":"api/index.html#repo-command","title":"<code>repo</code> Command","text":"<p>The <code>repo</code> command analyzes and queries remote code repositories.</p> <pre><code>cursor-utils repo [OPTIONS] REPO_URL QUERY\n</code></pre>"},{"location":"api/index.html#api-integration","title":"API Integration","text":"<p>Cursor-Utils integrates with several external APIs:</p> API Used By Purpose Google Gemini <code>gemini</code>, <code>project</code>, <code>repo</code> AI-powered content generation and code analysis Perplexity <code>web</code> Web search and research GitHub <code>github</code> Repository interaction and management <p>For information on configuring these APIs, see the installation guide and the <code>config</code> command documentation. </p>"},{"location":"api/cli.html","title":"CLI","text":""},{"location":"api/cli.html#command-line-interface","title":"Command-Line Interface","text":"<p>Cursor-Utils provides a consistent and intuitive command-line interface designed to streamline development workflows. This page documents the CLI structure, conventions, and common patterns.</p>"},{"location":"api/cli.html#command-structure","title":"Command Structure","text":"<p>The Cursor-Utils CLI follows a command-subcommand pattern:</p> <pre><code>cursor-utils [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS] [ARGUMENTS]\n</code></pre>"},{"location":"api/cli.html#global-options","title":"Global Options","text":"<p>These options apply to all commands:</p> Option Description Default <code>--debug</code> Enable debug output Disabled <code>--help</code>, <code>-h</code> Show help message and exit - <code>--version</code>, <code>-v</code> Show version information -"},{"location":"api/cli.html#commands","title":"Commands","text":"<p>Cursor-Utils provides the following main commands:</p> Command Description Documentation <code>config</code> Manage configuration settings config command <code>gemini</code> Generate content with Google's Gemini AI gemini command <code>github</code> Interact with GitHub repositories github command <code>web</code> Perform web research using Perplexity AI web command <code>project</code> Analyze local project code project command <code>repo</code> Analyze and query remote code repositories repo command"},{"location":"api/cli.html#common-command-options","title":"Common Command Options","text":"<p>While each command has specific options, many share these common options:</p> Option Description Default Available In <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> All commands <code>--help</code>, <code>-h</code> Show command-specific help - All commands <code>--model</code> AI model to use Varies by command gemini, web, project, repo"},{"location":"api/cli.html#output-formats","title":"Output Formats","text":"<p>All commands support multiple output formats, controlled by the <code>--format</code> option:</p> Format Description Best For <code>rich</code> Enhanced terminal output with colors and formatting Interactive use <code>plain</code> Simple text without formatting Log files, piping to other tools <code>markdown</code> Markdown formatted text Documentation, note-taking <code>json</code> Structured JSON data Programmatic use, automation <p>Example:</p> <pre><code>cursor-utils gemini --format markdown \"Write a function to validate email addresses\"\n</code></pre>"},{"location":"api/cli.html#error-handling","title":"Error Handling","text":"<p>Cursor-Utils provides consistent error handling across all commands:</p> <ol> <li>Error Messages: Clear, descriptive error messages are displayed in the terminal</li> <li>Exit Codes: Non-zero exit codes indicate failure:</li> <li><code>0</code>: Success</li> <li><code>1</code>: General error</li> <li><code>2</code>: Configuration error</li> <li><code>3</code>: Network/API error</li> <li><code>4</code>: Input validation error</li> </ol>"},{"location":"api/cli.html#environment-variables","title":"Environment Variables","text":"<p>Cursor-Utils supports configuration via environment variables, following the pattern <code>CURSOR_UTILS_</code> followed by the uppercase configuration key:</p> Environment Variable Description Example <code>CURSOR_UTILS_GEMINI_API_KEY</code> Google Gemini API key <code>export CURSOR_UTILS_GEMINI_API_KEY=your-key</code> <code>CURSOR_UTILS_PERPLEXITY_API_KEY</code> Perplexity API key <code>export CURSOR_UTILS_PERPLEXITY_API_KEY=your-key</code> <code>CURSOR_UTILS_GITHUB_TOKEN</code> GitHub personal access token <code>export CURSOR_UTILS_GITHUB_TOKEN=your-token</code> <code>CURSOR_UTILS_DEFAULT_FORMAT</code> Default output format <code>export CURSOR_UTILS_DEFAULT_FORMAT=markdown</code> <code>CURSOR_UTILS_DEBUG</code> Enable debug mode <code>export CURSOR_UTILS_DEBUG=1</code> <p>Environment variables take precedence over configuration file values.</p>"},{"location":"api/cli.html#command-completion","title":"Command Completion","text":"<p>Cursor-Utils supports command completion for Bash and Zsh shells. To enable it:</p>"},{"location":"api/cli.html#bash","title":"Bash","text":"<p>Add to your <code>~/.bashrc</code>:</p> <pre><code>eval \"$(cursor-utils --completion bash)\"\n</code></pre>"},{"location":"api/cli.html#zsh","title":"Zsh","text":"<p>Add to your <code>~/.zshrc</code>:</p> <pre><code>eval \"$(cursor-utils --completion zsh)\"\n</code></pre>"},{"location":"api/cli.html#redirection","title":"Redirection","text":"<p>Output can be redirected to files:</p> <pre><code>cursor-utils gemini --format markdown \"Write documentation for REST API best practices\" &gt; rest-best-practices.md\n</code></pre>"},{"location":"api/cli.html#exit-codes","title":"Exit Codes","text":"<p>Cursor-Utils commands return meaningful exit codes:</p> Exit Code Meaning Example Scenario 0 Success Command completed successfully 1 General error Unexpected runtime error 2 Configuration error Missing or invalid API key 3 Network/API error API rate limit exceeded 4 Input validation error Invalid command arguments"},{"location":"api/cli.html#progress-indicators","title":"Progress Indicators","text":"<p>For operations that may take time, Cursor-Utils displays progress indicators:</p> <ol> <li>Spinners: For operations without measurable progress</li> <li>Progress Bars: For operations with known stages</li> <li>Streaming Output: For results that can be displayed incrementally</li> </ol> <p>These indicators are automatically disabled when: - Output is not to a terminal (piping or redirection) - The <code>--format</code> option is set to <code>plain</code> or <code>json</code></p>"},{"location":"api/cli.html#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/cli.html#chaining-commands","title":"Chaining Commands","text":"<p>Commands can be chained together for complex workflows:</p> <pre><code># Research a topic, then generate code based on findings\nRESEARCH=$(cursor-utils web --format plain \"Best practices for Node.js error handling\")\ncursor-utils gemini \"Generate a Node.js error handling utility based on these best practices: $RESEARCH\"\n</code></pre>"},{"location":"api/cli.html#conditional-execution","title":"Conditional Execution","text":"<p>Use exit codes for conditional execution:</p> <pre><code># Only create an issue if analysis finds vulnerabilities\ncursor-utils project . \"Find security vulnerabilities\" &amp;&amp; cursor-utils github create-issue --owner your-username --repo your-repo --title \"Security vulnerabilities found\"\n</code></pre>"},{"location":"api/cli.html#debug-mode","title":"Debug Mode","text":"<p>For troubleshooting, enable debug mode with the <code>--debug</code> flag:</p> <pre><code>cursor-utils --debug gemini \"Generate a function\"\n</code></pre> <p>This provides additional information: - API request details - Configuration values being used - Performance metrics - Internal operation steps</p>"},{"location":"api/cli.html#configuration-precedence","title":"Configuration Precedence","text":"<p>When determining configuration values, Cursor-Utils follows this precedence (highest to lowest):</p> <ol> <li>Command-line arguments</li> <li>Environment variables</li> <li>Configuration file values</li> <li>Default values</li> </ol> <p>This allows flexible configuration while maintaining clear override rules.</p> <p>For detailed documentation on each command, refer to:</p> <ul> <li><code>config</code> Command</li> <li><code>gemini</code> Command</li> <li><code>github</code> Command</li> <li><code>web</code> Command</li> <li><code>project</code> Command</li> <li><code>repo</code> Command </li> </ul>"},{"location":"api/commands.html","title":"Commands","text":""},{"location":"api/commands.html#commands-reference","title":"Commands Reference","text":"<p>This page provides an overview of all available commands in Cursor-Utils. For detailed documentation on each command, follow the links to the individual command pages.</p>"},{"location":"api/commands.html#command-overview","title":"Command Overview","text":"<p>Cursor-Utils provides the following core commands:</p> Command Description Documentation <code>config</code> Manage configuration settings config command <code>gemini</code> Generate content with Google's Gemini AI gemini command <code>github</code> Interact with GitHub repositories github command <code>web</code> Perform web research using Perplexity AI web command <code>project</code> Analyze local project code project command <code>repo</code> Analyze and query remote code repositories repo command"},{"location":"api/commands.html#command-summaries","title":"Command Summaries","text":""},{"location":"api/commands.html#config-command","title":"Config Command","text":"<p>The <code>config</code> command manages persistent configuration settings, particularly API keys.</p> <pre><code>cursor-utils config {get|set|delete|list} [KEY] [VALUE]\n</code></pre> <p>Key Features: - Store and retrieve API keys securely - List all configuration values - Set default values for command options - Support for environment variable overrides</p> <p>Learn more about the config command \u2192</p>"},{"location":"api/commands.html#gemini-command","title":"Gemini Command","text":"<p>The <code>gemini</code> command generates content using Google's Gemini AI models.</p> <pre><code>cursor-utils gemini [OPTIONS] PROMPT\n</code></pre> <p>Key Features: - Generate code, documentation, and explanations - Select from multiple Gemini models - Customize generation parameters - Format output in various formats</p> <p>Learn more about the gemini command \u2192</p>"},{"location":"api/commands.html#github-command","title":"GitHub Command","text":"<p>The <code>github</code> command provides tools for interacting with GitHub repositories.</p> <pre><code>cursor-utils github COMMAND [OPTIONS]\n</code></pre> <p>Key Features: - Get repository information - List and manage issues - List and manage pull requests - Create new issues and pull requests</p> <p>Learn more about the github command \u2192</p>"},{"location":"api/commands.html#web-command","title":"Web Command","text":"<p>The <code>web</code> command searches the web using Perplexity AI to provide curated results.</p> <pre><code>cursor-utils web [OPTIONS] QUERY\n</code></pre> <p>Key Features: - Perform intelligent web searches - Get curated results for technical queries - Select from multiple Perplexity models - Format output in various formats</p> <p>Learn more about the web command \u2192</p>"},{"location":"api/commands.html#project-command","title":"Project Command","text":"<p>The <code>project</code> command analyzes local project code using Google's Gemini AI.</p> <pre><code>cursor-utils project [OPTIONS] PROJECT_PATH QUERY\n</code></pre> <p>Key Features: - Analyze local codebases - Get AI-powered insights about code structure - Ask questions about code functionality - Limit analysis to specific files or directories</p> <p>Learn more about the project command \u2192</p>"},{"location":"api/commands.html#repo-command","title":"Repo Command","text":"<p>The <code>repo</code> command analyzes and queries remote code repositories.</p> <pre><code>cursor-utils repo [OPTIONS] REPO_URL QUERY\n</code></pre> <p>Key Features: - Analyze remote repositories - Clone and analyze specific branches - Get AI-powered insights about code structure - Ask questions about code functionality</p> <p>Learn more about the repo command \u2192</p>"},{"location":"api/commands.html#common-command-patterns","title":"Common Command Patterns","text":"<p>All Cursor-Utils commands follow these common patterns:</p>"},{"location":"api/commands.html#output-formatting","title":"Output Formatting","text":"<p>All commands support multiple output formats:</p> <pre><code>cursor-utils COMMAND --format {plain|markdown|json|rich}\n</code></pre>"},{"location":"api/commands.html#help-information","title":"Help Information","text":"<p>All commands provide detailed help information:</p> <pre><code>cursor-utils COMMAND --help\n</code></pre>"},{"location":"api/commands.html#error-handling","title":"Error Handling","text":"<p>All commands use consistent error handling with meaningful exit codes:</p> <pre><code>cursor-utils COMMAND\nif [ $? -ne 0 ]; then\n  echo \"Command failed\"\nfi\n</code></pre>"},{"location":"api/commands.html#command-relationships","title":"Command Relationships","text":"<p>Commands in Cursor-Utils are designed to work together:</p> <ul> <li>Configuration: The <code>config</code> command manages settings used by all other commands</li> <li>Content Generation: The <code>gemini</code> command provides AI-powered content generation</li> <li>Research: The <code>web</code> command provides research capabilities</li> <li>Code Analysis: The <code>project</code> and <code>repo</code> commands analyze code</li> <li>GitHub Integration: The <code>github</code> command manages GitHub repositories</li> </ul>"},{"location":"api/commands.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Set Default Configuration: Use the <code>config</code> command to set default values    <pre><code>cursor-utils config set default_format markdown\n</code></pre></p> </li> <li> <p>Combine Commands: Use command output in scripts    <pre><code>REPO_INFO=$(cursor-utils github repo --owner microsoft --repo vscode --format json)\nREPO_NAME=$(echo $REPO_INFO | jq -r '.name')\n</code></pre></p> </li> <li> <p>Use Appropriate Models: Select the right model for your task    <pre><code># For creative content\ncursor-utils gemini --model gemini-2.0-pro-exp \"Generate test scenarios\"\n\n# For factual research\ncursor-utils web --model sonar-reasoning \"Explain ACID properties\"\n</code></pre></p> </li> <li> <p>Limit Analysis Scope: For large repositories, limit the scope    <pre><code>cursor-utils project . --max-files 20 \"Explain the authentication system\"\n</code></pre></p> </li> </ol>"},{"location":"api/commands.html#command-documentation","title":"Command Documentation","text":"<p>For detailed documentation on each command, refer to the dedicated command pages:</p> <ul> <li><code>config</code> Command</li> <li><code>gemini</code> Command</li> <li><code>github</code> Command</li> <li><code>web</code> Command</li> <li><code>project</code> Command</li> <li><code>repo</code> Command </li> </ul>"},{"location":"api/config.html","title":"Configuration","text":""},{"location":"api/config.html#configuration-api","title":"Configuration API","text":"<p>The Configuration API provides a flexible and consistent way to manage configuration settings for Cursor-Utils. It handles loading, saving, and accessing configuration values with support for environment variable overrides.</p>"},{"location":"api/config.html#overview","title":"Overview","text":"<p>Configuration in Cursor-Utils follows these principles:</p> <ol> <li>Simple Storage: Configuration is stored in a JSON file</li> <li>Environment Overrides: Environment variables take precedence over stored configuration</li> <li>Standard Locations: Configuration uses platform-specific standard locations</li> <li>Error Handling: Clear error messages when configuration operations fail</li> </ol>"},{"location":"api/config.html#configuration-storage","title":"Configuration Storage","text":"<p>By default, configuration is stored in a JSON file at:</p> <ul> <li>Linux/macOS: <code>~/.config/cursor-utils/config.json</code></li> <li>Windows: <code>%APPDATA%\\cursor-utils\\config.json</code></li> </ul> <p>You can customize this location by specifying a different path when loading configuration.</p>"},{"location":"api/config.html#key-components","title":"Key Components","text":""},{"location":"api/config.html#configuration-class","title":"Configuration Class","text":"<p>The <code>Configuration</code> class is the primary interface for working with configuration settings.</p> <pre><code>from cursor_utils.core.config import load_configuration\n\n# Load configuration from default location\nconfig = load_configuration()\n\n# Get a configuration value\napi_key = config.get(\"gemini_api_key\")\n\n# Set a configuration value\nconfig.set(\"default_format\", \"markdown\")\n\n# Delete a configuration value\nconfig.delete(\"test_key\")\n</code></pre>"},{"location":"api/config.html#environment-variables","title":"Environment Variables","text":"<p>Environment variables take precedence over stored configuration:</p> <pre><code># Set Gemini API key via environment variable\nexport GEMINI_API_KEY=your-api-key\n</code></pre>"},{"location":"api/config.html#api-reference","title":"API Reference","text":""},{"location":"api/config.html#get_default_config_path","title":"<code>get_default_config_path()</code>","text":"<p>Get the default configuration path based on the platform.</p> <p>Returns: - <code>Path</code>: Path to the default configuration file</p> <p>Example: <pre><code>from cursor_utils.core.config import get_default_config_path\n\n# Get the default configuration path\nconfig_path = get_default_config_path()\nprint(f\"Configuration will be stored at: {config_path}\")\n</code></pre></p>"},{"location":"api/config.html#class-configuration","title":"<code>class Configuration</code>","text":"<p>Configuration manager for cursor-utils.</p>"},{"location":"api/config.html#__init__config_pathnone","title":"<code>__init__(config_path=None)</code>","text":"<p>Initialize the configuration manager.</p> <p>Parameters: - <code>config_path</code> (Optional[Union[str, Path]]): Path to the configuration file, or None to use the default</p> <p>Example: <pre><code>from cursor_utils.core.config import Configuration\nfrom pathlib import Path\n\n# Use default configuration path\nconfig = Configuration()\n\n# Use custom configuration path\ncustom_config = Configuration(Path.home() / \"my-config.json\")\n</code></pre></p>"},{"location":"api/config.html#getkey-defaultnone","title":"<code>get(key, default=None)</code>","text":"<p>Get a configuration value with environment override.</p> <p>Parameters: - <code>key</code> (str): The configuration key - <code>default</code> (Any): The default value if the key is not found</p> <p>Returns: - The configuration value</p> <p>Example: <pre><code>from cursor_utils.core.config import load_configuration\n\nconfig = load_configuration()\n\n# Get API key with default\napi_key = config.get(\"gemini_api_key\", \"default-key\")\n\n# Get output format with default\nformat = config.get(\"default_format\", \"rich\")\n</code></pre></p>"},{"location":"api/config.html#setkey-value","title":"<code>set(key, value)</code>","text":"<p>Set a configuration value and save to the config file.</p> <p>Parameters: - <code>key</code> (str): The configuration key - <code>value</code> (Any): The configuration value</p> <p>Raises: - <code>ConfigError</code>: If the configuration cannot be saved</p> <p>Example: <pre><code>from cursor_utils.core.config import load_configuration\n\nconfig = load_configuration()\n\n# Set API key\nconfig.set(\"gemini_api_key\", \"your-api-key\")\n\n# Set default output format\nconfig.set(\"default_format\", \"markdown\")\n</code></pre></p>"},{"location":"api/config.html#deletekey","title":"<code>delete(key)</code>","text":"<p>Delete a configuration value and save to the config file.</p> <p>Parameters: - <code>key</code> (str): The configuration key</p> <p>Raises: - <code>ConfigError</code>: If the configuration cannot be saved</p> <p>Example: <pre><code>from cursor_utils.core.config import load_configuration\n\nconfig = load_configuration()\n\n# Delete a configuration key\nconfig.delete(\"test_key\")\n</code></pre></p>"},{"location":"api/config.html#load_configurationconfig_pathnone","title":"<code>load_configuration(config_path=None)</code>","text":"<p>Load configuration from a file or default location.</p> <p>Parameters: - <code>config_path</code> (Optional[Union[str, Path]]): Path to the configuration file, or None to use the default</p> <p>Returns: - <code>Configuration</code>: Configuration object</p> <p>Raises: - <code>ConfigError</code>: If the configuration cannot be loaded</p> <p>Example: <pre><code>from cursor_utils.core.config import load_configuration\nfrom pathlib import Path\n\n# Load from default location\nconfig = load_configuration()\n\n# Load from custom location\ncustom_config = load_configuration(Path.home() / \"my-config.json\")\n</code></pre></p>"},{"location":"api/config.html#common-configuration-keys","title":"Common Configuration Keys","text":"<p>Cursor-Utils uses the following common configuration keys:</p> Key Description Default Used By <code>gemini_api_key</code> Google Gemini API key None <code>gemini</code>, <code>project</code>, <code>repo</code> commands <code>perplexity_api_key</code> Perplexity API key None <code>web</code> command <code>github_token</code> GitHub personal access token None <code>github</code> command <code>default_format</code> Default output format <code>rich</code> All commands <code>default_gemini_model</code> Default Gemini model <code>gemini-1.5-pro</code> <code>gemini</code>, <code>project</code>, <code>repo</code> commands <code>default_perplexity_model</code> Default Perplexity model <code>sonar</code> <code>web</code> command"},{"location":"api/config.html#error-handling","title":"Error Handling","text":"<p>Configuration operations can raise <code>ConfigError</code> exceptions:</p> <pre><code>from cursor_utils.core.config import load_configuration\nfrom cursor_utils.core.errors import ConfigError\n\ntry:\n    config = load_configuration()\n    api_key = config.get(\"gemini_api_key\")\n    if not api_key:\n        raise ConfigError(\n            \"API key for Gemini not found in configuration\",\n            help_text=\"Set your API key using: cursor-utils config set gemini_api_key YOUR_API_KEY\"\n        )\nexcept ConfigError as e:\n    print(f\"Configuration error: {e.message}\")\n    if e.help_text:\n        print(f\"Help: {e.help_text}\")\n</code></pre>"},{"location":"api/config.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Environment Variables for Sensitive Data: For CI/CD and shared environments    <pre><code>export GEMINI_API_KEY=your-api-key\n</code></pre></p> </li> <li> <p>Set Default Values: Configure commonly used options as defaults    <pre><code>config.set(\"default_format\", \"markdown\")\nconfig.set(\"default_gemini_model\", \"gemini-1.5-pro\")\n</code></pre></p> </li> <li> <p>Handle Missing Configuration: Always check for required configuration    <pre><code>api_key = config.get(\"gemini_api_key\")\nif not api_key:\n    # Handle missing API key\n</code></pre></p> </li> <li> <p>Provide Helpful Error Messages: Include instructions for resolving issues    <pre><code>if not api_key:\n    raise ConfigError(\n        \"API key not found\",\n        help_text=\"Set your API key using: cursor-utils config set gemini_api_key YOUR_API_KEY\"\n    )\n</code></pre></p> </li> </ol>"},{"location":"api/models.html","title":"Models","text":""},{"location":"api/models.html#models-api","title":"Models API","text":"<p>The Models API in Cursor-Utils provides structured information about the available commands, their options, and usage patterns. This documentation is primarily used by AI agents to understand how to interact with Cursor-Utils.</p>"},{"location":"api/models.html#overview","title":"Overview","text":"<p>The models module contains documentation files that define:</p> <ol> <li>Command Structure: The available commands and their syntax</li> <li>Command Options: The options and arguments for each command</li> <li>Usage Examples: Examples of how to use each command</li> <li>Best Practices: Recommendations for effective use of commands</li> </ol>"},{"location":"api/models.html#model-files","title":"Model Files","text":""},{"location":"api/models.html#cursor-utilsmd","title":"cursor-utils.md","text":"<p>The primary model file that defines the Cursor-Utils command-line interface for AI agents. This file is automatically loaded by Cursor AI agents to understand how to use the Cursor-Utils commands.</p> <pre><code>---\ndescription: cursor-utils\nglobs: *\nalwaysApply: true\n---\n\n# Cursor-Utils: Command-Line Utilities for Cursor AI Agents\n</code></pre>"},{"location":"api/models.html#command-documentation","title":"Command Documentation","text":"<p>The model provides detailed documentation for each command:</p>"},{"location":"api/models.html#config-command","title":"Config Command","text":"<pre><code>cursor-utils config {get|set|delete|list} [KEY] [VALUE]\n</code></pre> <p>Used to manage persistent configuration settings, particularly API keys.</p>"},{"location":"api/models.html#gemini-command","title":"Gemini Command","text":"<pre><code>cursor-utils gemini [OPTIONS] PROMPT\n</code></pre> <p>Generates content using Google's Gemini AI models with options for model selection, formatting, and generation parameters.</p>"},{"location":"api/models.html#github-command","title":"GitHub Command","text":"<pre><code>cursor-utils github COMMAND [OPTIONS]\n</code></pre> <p>Provides tools for interacting with GitHub repositories, including repository information, issues, and pull requests.</p>"},{"location":"api/models.html#web-command","title":"Web Command","text":"<pre><code>cursor-utils web [OPTIONS] QUERY\n</code></pre> <p>Searches the web using Perplexity AI to provide curated results for research queries.</p>"},{"location":"api/models.html#project-command","title":"Project Command","text":"<pre><code>cursor-utils project [OPTIONS] PROJECT_PATH QUERY\n</code></pre> <p>Analyzes local project code using Google's Gemini AI to provide insights about the codebase.</p>"},{"location":"api/models.html#repo-command","title":"Repo Command","text":"<pre><code>cursor-utils repo [OPTIONS] REPO_URL QUERY\n</code></pre> <p>Analyzes and queries remote code repositories to provide insights about the codebase.</p>"},{"location":"api/models.html#model-structure","title":"Model Structure","text":"<p>The model file follows a consistent structure:</p> <ol> <li>Command Overview: Brief description of the command's purpose</li> <li>Command Syntax: The command-line syntax with placeholders</li> <li>Options: Available options with descriptions</li> <li>Subcommands: For commands that have subcommands</li> <li>Examples: Practical examples of command usage</li> </ol>"},{"location":"api/models.html#usage-in-ai-agents","title":"Usage in AI Agents","text":"<p>AI agents use this model to:</p> <ol> <li>Understand Commands: Interpret user requests and map them to appropriate commands</li> <li>Format Commands: Construct properly formatted command-line invocations</li> <li>Provide Guidance: Offer help and suggestions for command usage</li> <li>Handle Errors: Interpret and respond to command errors</li> </ol>"},{"location":"api/models.html#extending-models","title":"Extending Models","text":"<p>When adding new commands to Cursor-Utils, the model file should be updated to include:</p> <ol> <li>Command Description: A clear description of the command's purpose</li> <li>Command Syntax: The exact syntax for using the command</li> <li>Options Documentation: All available options with descriptions</li> <li>Usage Examples: At least 2-3 examples of common use cases</li> </ol>"},{"location":"api/models.html#best-practices","title":"Best Practices","text":"<ol> <li>Keep Models Updated: Ensure model documentation matches the actual implementation</li> <li>Provide Clear Examples: Include practical examples that demonstrate real-world usage</li> <li>Document All Options: Include all available options, even if rarely used</li> <li>Include Error Handling: Where appropriate, include examples of error handling</li> <li>Use Consistent Formatting: Maintain consistent formatting across all command documentation </li> </ol>"},{"location":"api/utils.html","title":"Utilities","text":""},{"location":"api/utils.html#utilities-api","title":"Utilities API","text":"<p>Cursor-Utils provides a collection of utility modules that handle common operations for filesystem access, Git operations, text processing, and file ranking. These utilities are used throughout the application to provide consistent behavior and error handling.</p>"},{"location":"api/utils.html#overview","title":"Overview","text":"<p>The utilities are organized into the following modules:</p> Module Description Primary Functions Filesystem (fs) File and directory operations Reading/writing files, directory management Git Operations (git) Git repository interactions Clone, checkout, analyze repositories Text Processing (text) Text manipulation functions Text formatting, ANSI handling, code highlighting File Ranking (file_rank_algo) Algorithms for ranking files File ranking based on multiple factors"},{"location":"api/utils.html#filesystem-utilities","title":"Filesystem Utilities","text":"<p>The <code>fs</code> module provides functions for file and directory operations with consistent error handling.</p>"},{"location":"api/utils.html#core-functions","title":"Core Functions","text":""},{"location":"api/utils.html#ensure_directorypath","title":"<code>ensure_directory(path)</code>","text":"<p>Ensure a directory exists, creating it if necessary.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): The directory path</p> <p>Returns: - <code>Path</code>: The directory path as a Path object</p> <p>Raises: - <code>FilesystemError</code>: If the directory cannot be created</p> <p>Example: <pre><code>from cursor_utils.utils.fs import ensure_directory\n\n# Create a directory if it doesn't exist\nconfig_dir = ensure_directory(\"~/.config/my-app\")\n</code></pre></p>"},{"location":"api/utils.html#get_temp_dirprefixcursor_utils_","title":"<code>get_temp_dir(prefix=\"cursor_utils_\")</code>","text":"<p>Get a temporary directory with the specified prefix.</p> <p>Parameters: - <code>prefix</code> (str): The prefix for the directory name</p> <p>Returns: - <code>Path</code>: The temporary directory path</p> <p>Raises: - <code>FilesystemError</code>: If the temporary directory cannot be created</p> <p>Example: <pre><code>from cursor_utils.utils.fs import get_temp_dir\n\n# Create a temporary directory\ntemp_dir = get_temp_dir(\"my_app_\")\ntry:\n    # Use the temporary directory\n    print(f\"Using temporary directory: {temp_dir}\")\nfinally:\n    # Clean up (optional, depends on your needs)\n    import shutil\n    shutil.rmtree(temp_dir)\n</code></pre></p>"},{"location":"api/utils.html#read_filepath-binaryfalse","title":"<code>read_file(path, binary=False)</code>","text":"<p>Read a file, optionally in binary mode.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): The file path - <code>binary</code> (bool): Whether to read the file in binary mode</p> <p>Returns: - <code>Union[str, bytes]</code>: The file contents</p> <p>Raises: - <code>FilesystemError</code>: If the file cannot be read</p> <p>Example: <pre><code>from cursor_utils.utils.fs import read_file\n\n# Read a text file\ncontent = read_file(\"config.json\")\n\n# Read a binary file\nbinary_content = read_file(\"image.png\", binary=True)\n</code></pre></p>"},{"location":"api/utils.html#write_filepath-content-binaryfalse","title":"<code>write_file(path, content, binary=False)</code>","text":"<p>Write content to a file, optionally in binary mode.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): The file path - <code>content</code> (Union[str, bytes]): The file contents - <code>binary</code> (bool): Whether to write the file in binary mode</p> <p>Raises: - <code>FilesystemError</code>: If the file cannot be written</p> <p>Example: <pre><code>from cursor_utils.utils.fs import write_file\n\n# Write a text file\nwrite_file(\"output.txt\", \"Hello, world!\")\n\n# Write a binary file\nwrite_file(\"output.bin\", b\"\\x00\\x01\\x02\\x03\", binary=True)\n</code></pre></p>"},{"location":"api/utils.html#list_filesdirectory-pattern-recursivefalse","title":"<code>list_files(directory, pattern=\"*\", recursive=False)</code>","text":"<p>List files in a directory matching a glob pattern.</p> <p>Parameters: - <code>directory</code> (Union[str, Path]): The directory path - <code>pattern</code> (str): The glob pattern to match - <code>recursive</code> (bool): Whether to search recursively</p> <p>Returns: - <code>list[Path]</code>: The list of file paths</p> <p>Raises: - <code>FilesystemError</code>: If the directory cannot be read</p> <p>Example: <pre><code>from cursor_utils.utils.fs import list_files\n\n# List all Python files in the current directory\npy_files = list_files(\".\", \"*.py\")\n\n# List all JSON files recursively\njson_files = list_files(\".\", \"*.json\", recursive=True)\n</code></pre></p>"},{"location":"api/utils.html#is_binary_filepath","title":"<code>is_binary_file(path)</code>","text":"<p>Check if a file is binary.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): The file path</p> <p>Returns: - <code>bool</code>: True if the file is binary, False otherwise</p> <p>Raises: - <code>FilesystemError</code>: If the file cannot be read</p> <p>Example: <pre><code>from cursor_utils.utils.fs import is_binary_file\n\n# Check if a file is binary\nif is_binary_file(\"unknown_file\"):\n    print(\"This is a binary file\")\nelse:\n    print(\"This is a text file\")\n</code></pre></p>"},{"location":"api/utils.html#error-handling","title":"Error Handling","text":"<p>The <code>fs</code> module defines a <code>FilesystemError</code> class that provides context-specific error messages for filesystem operations.</p> <pre><code>try:\n    content = read_file(\"non_existent_file.txt\")\nexcept FilesystemError as e:\n    print(f\"Filesystem error: {e.message}\")\n    print(f\"Path: {e.path}\")\n    if e.help_text:\n        print(f\"Help: {e.help_text}\")\n</code></pre>"},{"location":"api/utils.html#git-utilities","title":"Git Utilities","text":"<p>The <code>git</code> module provides functions for working with Git repositories.</p>"},{"location":"api/utils.html#core-functions_1","title":"Core Functions","text":""},{"location":"api/utils.html#_run_git_commandargs-cwdnone-capture_outputtrue","title":"<code>_run_git_command(args, cwd=None, capture_output=True)</code>","text":"<p>Internal function to run a Git command.</p> <p>Parameters: - <code>args</code> (list[str]): The Git command arguments - <code>cwd</code> (Optional[Union[str, Path]]): The working directory - <code>capture_output</code> (bool): Whether to capture the command output</p> <p>Returns: - <code>str</code>: The command output</p> <p>Raises: - <code>GitError</code>: If the command fails</p>"},{"location":"api/utils.html#is_git_repositorypath","title":"<code>is_git_repository(path)</code>","text":"<p>Check if a directory is a Git repository.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): The directory path</p> <p>Returns: - <code>bool</code>: True if the directory is a Git repository, False otherwise</p> <p>Example: <pre><code>from cursor_utils.utils.git import is_git_repository\n\n# Check if the current directory is a Git repository\nif is_git_repository(\".\"):\n    print(\"This is a Git repository\")\nelse:\n    print(\"This is not a Git repository\")\n</code></pre></p>"},{"location":"api/utils.html#get_repository_rootpath","title":"<code>get_repository_root(path)</code>","text":"<p>Get the root directory of a Git repository.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): A path within the repository</p> <p>Returns: - <code>Path</code>: The repository root path</p> <p>Raises: - <code>GitError</code>: If the path is not within a Git repository</p> <p>Example: <pre><code>from cursor_utils.utils.git import get_repository_root\n\n# Get the root directory of the Git repository\nrepo_root = get_repository_root(\".\")\nprint(f\"Repository root: {repo_root}\")\n</code></pre></p>"},{"location":"api/utils.html#get_default_branchpath","title":"<code>get_default_branch(path)</code>","text":"<p>Get the default branch of a repository.</p> <p>Parameters: - <code>path</code> (Union[str, Path]): A path within the repository</p> <p>Returns: - <code>str</code>: The default branch name</p> <p>Raises: - <code>GitError</code>: If the default branch cannot be determined</p> <p>Example: <pre><code>from cursor_utils.utils.git import get_default_branch\n\n# Get the default branch of a repository\nbranch = get_default_branch(\"my-repo\")\nprint(f\"Default branch: {branch}\")\n</code></pre></p>"},{"location":"api/utils.html#clone_repositoryurl-target_dir-branchnone-depthnone","title":"<code>clone_repository(url, target_dir, branch=None, depth=None)</code>","text":"<p>Clone a Git repository.</p> <p>Parameters: - <code>url</code> (str): The repository URL - <code>target_dir</code> (Union[str, Path]): The target directory - <code>branch</code> (Optional[str]): The branch to checkout - <code>depth</code> (Optional[int]): The clone depth (for shallow clones)</p> <p>Returns: - <code>Path</code>: The repository directory path</p> <p>Raises: - <code>GitError</code>: If the repository cannot be cloned</p> <p>Example: <pre><code>from cursor_utils.utils.git import clone_repository\n\n# Clone a repository\nrepo_dir = clone_repository(\n    \"https://github.com/gweidart/cursor-utils.git\",\n    \"cursor-utils-clone\",\n    branch=\"main\",\n    depth=1\n)\n</code></pre></p>"},{"location":"api/utils.html#error-handling_1","title":"Error Handling","text":"<p>The <code>git</code> module defines a <code>GitError</code> class for Git-related errors:</p> <pre><code>try:\n    repo_root = get_repository_root(\"not-a-git-repo\")\nexcept GitError as e:\n    print(f\"Git error: {e.message}\")\n    if e.help_text:\n        print(f\"Help: {e.help_text}\")\n</code></pre>"},{"location":"api/utils.html#text-utilities","title":"Text Utilities","text":"<p>The <code>text</code> module provides functions for text processing and formatting.</p>"},{"location":"api/utils.html#core-functions_2","title":"Core Functions","text":""},{"location":"api/utils.html#truncate_texttext-max_length-suffix","title":"<code>truncate_text(text, max_length, suffix=\"...\")</code>","text":"<p>Truncate text to a maximum length.</p> <p>Parameters: - <code>text</code> (str): The text to truncate - <code>max_length</code> (int): The maximum length - <code>suffix</code> (str): The suffix to append if truncated</p> <p>Returns: - <code>str</code>: The truncated text</p> <p>Example: <pre><code>from cursor_utils.utils.text import truncate_text\n\n# Truncate a long string\nlong_text = \"This is a very long text that needs to be truncated\"\nshort_text = truncate_text(long_text, 20)\nprint(short_text)  # \"This is a very long...\"\n</code></pre></p>"},{"location":"api/utils.html#wrap_texttext-width80","title":"<code>wrap_text(text, width=80)</code>","text":"<p>Wrap text to a maximum width.</p> <p>Parameters: - <code>text</code> (str): The text to wrap - <code>width</code> (int): The maximum width</p> <p>Returns: - <code>str</code>: The wrapped text</p> <p>Example: <pre><code>from cursor_utils.utils.text import wrap_text\n\n# Wrap text to a specific width\nlong_text = \"This is a long text that will be wrapped to fit within the specified width\"\nwrapped_text = wrap_text(long_text, width=40)\nprint(wrapped_text)\n</code></pre></p>"},{"location":"api/utils.html#strip_ansitext","title":"<code>strip_ansi(text)</code>","text":"<p>Strip ANSI escape sequences from text.</p> <p>Parameters: - <code>text</code> (str): The text to strip</p> <p>Returns: - <code>str</code>: The stripped text</p> <p>Example: <pre><code>from cursor_utils.utils.text import strip_ansi\n\n# Strip ANSI escape sequences from text\nansi_text = \"\\033[31mRed text\\033[0m\"\nplain_text = strip_ansi(ansi_text)\nprint(plain_text)  # \"Red text\"\n</code></pre></p>"},{"location":"api/utils.html#highlight_codecode-rich_theme-languagenone-line_numbersfalse-use_richfalse","title":"<code>highlight_code(code, rich_theme, language=None, line_numbers=False, use_rich=False)</code>","text":"<p>Highlight code syntax.</p> <p>Parameters: - <code>code</code> (str): The code to highlight - <code>rich_theme</code> (str | SyntaxTheme): The Rich theme to use - <code>language</code> (Optional[str]): The language for syntax highlighting - <code>line_numbers</code> (bool): Whether to include line numbers - <code>use_rich</code> (bool): Whether to use Rich for highlighting</p> <p>Returns: - <code>str</code>: The highlighted code</p> <p>Example: <pre><code>from cursor_utils.utils.text import highlight_code\n\n# Highlight Python code\ncode = \"def hello():\\n    print('Hello, world!')\"\nhighlighted = highlight_code(code, \"monokai\", language=\"python\", line_numbers=True)\nprint(highlighted)\n</code></pre></p>"},{"location":"api/utils.html#file-ranking-utilities","title":"File Ranking Utilities","text":"<p>The <code>file_rank_algo</code> module provides algorithms for ranking files by relevance and importance.</p>"},{"location":"api/utils.html#core-types","title":"Core Types","text":""},{"location":"api/utils.html#basefileinfo","title":"<code>BaseFileInfo</code>","text":"<p>Base TypedDict with the required path key.</p> <pre><code>class BaseFileInfo(TypedDict):\n    path: str\n</code></pre>"},{"location":"api/utils.html#processedfileinfo","title":"<code>ProcessedFileInfo</code>","text":"<p>TypedDict for files that have been processed with all required fields.</p> <pre><code>class ProcessedFileInfo(BaseFileInfo):\n    type: str\n    size: int\n    creation_time: float\n    importance_score: float\n</code></pre>"},{"location":"api/utils.html#fileinfo","title":"<code>FileInfo</code>","text":"<p>TypedDict for file info with optional fields.</p> <pre><code>class FileInfo(BaseFileInfo, total=False):\n    type: str\n    size: int\n    time: float\n    creation_time: float\n    importance_score: float\n</code></pre>"},{"location":"api/utils.html#core-functions_3","title":"Core Functions","text":""},{"location":"api/utils.html#build_file_listbase_path","title":"<code>build_file_list(base_path)</code>","text":"<p>Build a list of FileInfo dictionaries for a given base path.</p> <p>Parameters: - <code>base_path</code> (str): The base path to scan for files</p> <p>Returns: - <code>list[FileInfo]</code>: A list of FileInfo dictionaries with path keys</p> <p>Example: <pre><code>from cursor_utils.utils.file_rank_algo import build_file_list\n\n# Get a list of files in a directory\nfiles = build_file_list(\"./my-project\")\nprint(f\"Found {len(files)} files\")\n</code></pre></p>"},{"location":"api/utils.html#fileranker-class","title":"FileRanker Class","text":"<p>The <code>FileRanker</code> class provides file ranking functionality based on multiple factors.</p>"},{"location":"api/utils.html#filerankertype_weight10-size_weight10-time_weight10-gitignore_pathnone-gitinclude_pathnone","title":"<code>FileRanker(type_weight=1.0, size_weight=1.0, time_weight=1.0, gitignore_path=None, gitinclude_path=None)</code>","text":"<p>Create a new FileRanker instance.</p> <p>Parameters: - <code>type_weight</code> (float): Influence of file-type frequency in the final score - <code>size_weight</code> (float): Influence of file size in the final score - <code>time_weight</code> (float): Influence of file creation time in the final score - <code>gitignore_path</code> (Optional[str]): Path to a .gitignore-like file with exclusion patterns - <code>gitinclude_path</code> (Optional[str]): Path to a .gitinclude-like file with inclusion patterns</p> <p>Example: <pre><code>from cursor_utils.utils.file_rank_algo import FileRanker, build_file_list\n\n# Create a ranker with custom weights\nranker = FileRanker(\n    type_weight=1.5,  # Prefer common file types\n    size_weight=0.8,  # Slightly prefer smaller files\n    time_weight=1.2,  # Prefer newer files\n    gitignore_path=\".gitignore\"  # Use .gitignore patterns\n)\n\n# Rank files\nfiles = build_file_list(\"./my-project\")\nranked_files = ranker.rank_files(files)\n\n# Print top 5 most important files\nfor file_info in ranked_files[:5]:\n    print(f\"{file_info['path']} (score: {file_info['importance_score']:.2f})\")\n</code></pre></p>"},{"location":"api/utils.html#rank_filesfiles","title":"<code>rank_files(files)</code>","text":"<p>Rank files by importance score.</p> <p>Parameters: - <code>files</code> (list[FileInfo]): List of FileInfo dictionaries</p> <p>Returns: - <code>list[ProcessedFileInfo]</code>: List of ranked files with all fields set</p> <p>Example: <pre><code>from cursor_utils.utils.file_rank_algo import FileRanker, build_file_list\n\n# Create a ranker and rank files\nranker = FileRanker()\nfiles = build_file_list(\"./my-project\")\nranked_files = ranker.rank_files(files)\n</code></pre></p>"},{"location":"api/utils.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Handle Errors Properly: All utility functions raise specific exceptions with helpful error messages    <pre><code>try:\n    clone_repository(\"https://github.com/invalid/repo.git\", \"target\")\nexcept GitError as e:\n    print(f\"Git error: {e.message}\")\n    if e.help_text:\n        print(f\"Help: {e.help_text}\")\n</code></pre></p> </li> <li> <p>Clean Up Temporary Resources: When using functions that create temporary resources, ensure proper cleanup    <pre><code>temp_dir = get_temp_dir()\ntry:\n    # Use temporary directory\nfinally:\n    import shutil\n    shutil.rmtree(temp_dir)\n</code></pre></p> </li> <li> <p>Prefer Path Objects: Most functions accept both strings and Path objects, but using Path objects provides more flexibility    <pre><code>from pathlib import Path\nconfig_dir = ensure_directory(Path.home() / \".config\" / \"cursor-utils\")\n</code></pre></p> </li> <li> <p>Use Safe Operations: Utility functions handle common edge cases and provide safe defaults    <pre><code># Safely read a file that might not exist\ntry:\n    content = read_file(\"config.json\")\nexcept FilesystemError:\n    content = \"{}\"  # Default content\n</code></pre></p> </li> </ol>"},{"location":"commands/config.html","title":"config","text":""},{"location":"commands/config.html#config-command","title":"Config Command","text":"<p>The <code>config</code> command manages persistent configuration settings for Cursor-Utils, with a particular focus on storing and retrieving API keys securely.</p>"},{"location":"commands/config.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils config {SUBCOMMAND} [KEY] [VALUE] [OPTIONS]\n</code></pre>"},{"location":"commands/config.html#subcommands","title":"Subcommands","text":"Subcommand Description Syntax <code>list</code> List all configuration values <code>cursor-utils config list [OPTIONS]</code> <code>get</code> Get a specific configuration value <code>cursor-utils config get KEY [OPTIONS]</code> <code>set</code> Set a configuration value <code>cursor-utils config set KEY VALUE [OPTIONS]</code> <code>delete</code> Delete a configuration value <code>cursor-utils config delete KEY [OPTIONS]</code>"},{"location":"commands/config.html#options","title":"Options","text":"Option Description Default Example <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format json</code> <code>--help</code> Show command help - <code>--help</code>"},{"location":"commands/config.html#configuration-storage","title":"Configuration Storage","text":"<p>By default, Cursor-Utils stores configuration in a JSON file located at:</p> <ul> <li>Linux/macOS: <code>~/.config/cursor-utils/config.json</code></li> <li>Windows: <code>%APPDATA%\\cursor-utils\\config.json</code></li> </ul> <p>The configuration file is automatically created when you first use the <code>config set</code> command.</p>"},{"location":"commands/config.html#common-configuration-keys","title":"Common Configuration Keys","text":"Key Description Used By Commands <code>gemini_api_key</code> Google Gemini API key <code>gemini</code>, <code>project</code>, <code>repo</code> <code>perplexity_api_key</code> Perplexity API key <code>web</code> <code>github_token</code> GitHub personal access token <code>github</code> <code>default_format</code> Default output format All commands <code>default_gemini_model</code> Default Gemini model <code>gemini</code>, <code>project</code>, <code>repo</code> <code>default_perplexity_model</code> Default Perplexity model <code>web</code>"},{"location":"commands/config.html#examples","title":"Examples","text":""},{"location":"commands/config.html#listing-all-configuration-values","title":"Listing All Configuration Values","text":"<p>To see all currently configured values:</p> <pre><code>cursor-utils config list\n</code></pre> <p>This will display a table of all configuration keys and their values.</p> <p>With JSON output:</p> <pre><code>cursor-utils config list --format json\n</code></pre>"},{"location":"commands/config.html#getting-a-specific-configuration-value","title":"Getting a Specific Configuration Value","text":"<p>To retrieve a specific configuration value:</p> <pre><code>cursor-utils config get gemini_api_key\n</code></pre> <p>This will display just the value of the specified key.</p>"},{"location":"commands/config.html#setting-configuration-values","title":"Setting Configuration Values","text":"<p>To set or update a configuration value:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_API_KEY\n</code></pre> <p>For setting the default Gemini model:</p> <pre><code>cursor-utils config set default_gemini_model gemini-1.5-pro\n</code></pre> <p>For setting the default output format:</p> <pre><code>cursor-utils config set default_format markdown\n</code></pre>"},{"location":"commands/config.html#deleting-configuration-values","title":"Deleting Configuration Values","text":"<p>To remove a configuration value:</p> <pre><code>cursor-utils config delete test_key\n</code></pre>"},{"location":"commands/config.html#using-environment-variables","title":"Using Environment Variables","text":"<p>All configuration values can also be set using environment variables, which take precedence over values in the configuration file.</p> <pre><code>export GEMINI_API_KEY=your_api_key\nexport DEFAULT_FORMAT=markdown\nexport GITHUB_TOKEN=your_github_token\n</code></pre>"},{"location":"commands/config.html#api-key-setup","title":"API Key Setup","text":""},{"location":"commands/config.html#google-gemini-api-key","title":"Google Gemini API Key","text":"<p>To use the <code>gemini</code>, <code>project</code>, and <code>repo</code> commands, you need a Google Gemini API key:</p> <ol> <li>Visit Google AI Studio to create an API key</li> <li>Configure the key in Cursor-Utils:</li> </ol> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre>"},{"location":"commands/config.html#perplexity-api-key","title":"Perplexity API Key","text":"<p>To use the <code>web</code> command, you need a Perplexity API key:</p> <ol> <li>Visit Perplexity API documentation to create an API key</li> <li>Configure the key in Cursor-Utils:</li> </ol> <pre><code>cursor-utils config set perplexity_api_key YOUR_PERPLEXITY_API_KEY\n</code></pre>"},{"location":"commands/config.html#github-token","title":"GitHub Token","text":"<p>To use the <code>github</code> command, you need a GitHub personal access token:</p> <ol> <li>Create a token at GitHub Settings &gt; Developer settings &gt; Personal access tokens</li> <li>Configure the token in Cursor-Utils:</li> </ol> <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre>"},{"location":"commands/config.html#security-considerations","title":"Security Considerations","text":"<p>Configuration values, including API keys, are stored in plaintext in the configuration file. For enhanced security:</p> <ol> <li>Ensure appropriate file permissions are set on the configuration file</li> <li>Consider using environment variables for sensitive values in shared environments</li> <li>On shared systems, use user-specific installations of Cursor-Utils</li> </ol>"},{"location":"commands/config.html#best-practices","title":"Best Practices","text":"<ol> <li>Regularly Rotate API Keys: Periodically update your API keys for security</li> <li>Set Default Values: Configure defaults for commonly used options:    <pre><code>cursor-utils config set default_format markdown\ncursor-utils config set default_gemini_model gemini-1.5-pro\n</code></pre></li> <li>Use Separate Keys: For production vs. development environments</li> <li>Check Configuration: Verify your configuration before troubleshooting:    <pre><code>cursor-utils config list\n</code></pre></li> </ol>"},{"location":"commands/gemini.html","title":"gemini","text":""},{"location":"commands/gemini.html#gemini-command","title":"Gemini Command","text":"<p>The <code>gemini</code> command generates content using Google's Gemini AI models, providing powerful AI-assisted capabilities for code generation, explanations, and more.</p>"},{"location":"commands/gemini.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils gemini [OPTIONS] PROMPT\n</code></pre>"},{"location":"commands/gemini.html#arguments","title":"Arguments","text":"Argument Description Required Example <code>PROMPT</code> The text prompt for Gemini to respond to Yes \"Explain how promises work in JavaScript\""},{"location":"commands/gemini.html#options","title":"Options","text":"Option Description Default Example <code>--model</code> The Gemini model to use <code>gemini-1.5-pro</code> <code>--model gemini-2.0-flash</code> <code>--temperature</code> Sampling temperature (0.0-1.0) <code>0.7</code> <code>--temperature 0.9</code> <code>--max-tokens</code> Maximum tokens to generate Based on model <code>--max-tokens 1000</code> <code>--system</code> System instruction for guiding model behavior None <code>--system \"You are a Python expert\"</code> <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format markdown</code> <code>--help</code> Show command help - <code>--help</code>"},{"location":"commands/gemini.html#available-models","title":"Available Models","text":"Model Description Best For <code>gemini-1.5-pro</code> Powerful general-purpose model Default for most use cases <code>gemini-2.0-pro-exp</code> Experimental pro model Complex reasoning, cutting-edge <code>gemini-2.0-flash</code> Faster, more efficient model Quick responses, simpler tasks <code>gemini-2.0-flash-exp</code> Experimental flash model Testing latest capabilities <code>gemini-2.0-flash-thinking-exp</code> Enhanced thinking capabilities Step-by-step reasoning"},{"location":"commands/gemini.html#configuration","title":"Configuration","text":"<p>Before using the <code>gemini</code> command, you need to set up your Google Gemini API key:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre> <p>You can obtain an API key from Google AI Studio.</p>"},{"location":"commands/gemini.html#examples","title":"Examples","text":""},{"location":"commands/gemini.html#basic-usage","title":"Basic Usage","text":"<p>Generate a simple response:</p> <pre><code>cursor-utils gemini \"Explain quantum computing in simple terms\"\n</code></pre>"},{"location":"commands/gemini.html#code-generation","title":"Code Generation","text":"<p>Generate a Python function:</p> <pre><code>cursor-utils gemini \"Write a Python function to check if a string is a palindrome\"\n</code></pre>"},{"location":"commands/gemini.html#using-different-models","title":"Using Different Models","text":"<p>Use a specific model:</p> <pre><code>cursor-utils gemini --model gemini-2.0-flash \"Write a JavaScript function to sort an array\"\n</code></pre>"},{"location":"commands/gemini.html#controlling-temperature","title":"Controlling Temperature","text":"<p>Lower temperature for more focused, deterministic responses:</p> <pre><code>cursor-utils gemini --temperature 0.2 \"List 5 best practices for RESTful API design\"\n</code></pre> <p>Higher temperature for more creative, varied responses:</p> <pre><code>cursor-utils gemini --temperature 0.9 \"Generate unique names for a fantasy game\"\n</code></pre>"},{"location":"commands/gemini.html#using-system-instructions","title":"Using System Instructions","text":"<p>Guide the model's behavior with system instructions:</p> <pre><code>cursor-utils gemini --system \"You are a security expert specialized in code review\" \"Review this code for vulnerabilities: ...\"\n</code></pre> <pre><code>cursor-utils gemini --system \"You are a technical writer who explains complex concepts clearly\" \"Explain OAuth 2.0 authorization flow\"\n</code></pre>"},{"location":"commands/gemini.html#different-output-formats","title":"Different Output Formats","text":"<p>Output in markdown format:</p> <pre><code>cursor-utils gemini --format markdown \"Create documentation for a REST API endpoint\"\n</code></pre> <p>Output in JSON format:</p> <pre><code>cursor-utils gemini --format json \"List common HTTP status codes with descriptions\"\n</code></pre>"},{"location":"commands/gemini.html#limiting-output-length","title":"Limiting Output Length","text":"<p>Specify maximum token generation:</p> <pre><code>cursor-utils gemini --max-tokens 500 \"Summarize the history of artificial intelligence\"\n</code></pre>"},{"location":"commands/gemini.html#use-cases","title":"Use Cases","text":""},{"location":"commands/gemini.html#code-development","title":"Code Development","text":"<ul> <li> <p>Generate function implementations   <pre><code>cursor-utils gemini \"Write a Python function to paginate API results\"\n</code></pre></p> </li> <li> <p>Write test cases   <pre><code>cursor-utils gemini \"Create unit tests for this function: def add(a, b): return a + b\"\n</code></pre></p> </li> <li> <p>Debug code   <pre><code>cursor-utils gemini \"Debug this code: for i in range(10): print(i[0])\"\n</code></pre></p> </li> </ul>"},{"location":"commands/gemini.html#documentation","title":"Documentation","text":"<ul> <li> <p>Generate technical documentation   <pre><code>cursor-utils gemini --format markdown \"Write documentation for a database connection class\"\n</code></pre></p> </li> <li> <p>Create usage examples   <pre><code>cursor-utils gemini \"Show examples of using the requests library in Python\"\n</code></pre></p> </li> </ul>"},{"location":"commands/gemini.html#learning","title":"Learning","text":"<ul> <li> <p>Explain concepts   <pre><code>cursor-utils gemini \"Explain CORS and why it's important for web security\"\n</code></pre></p> </li> <li> <p>Compare technologies   <pre><code>cursor-utils gemini \"Compare MongoDB and PostgreSQL for web applications\"\n</code></pre></p> </li> </ul>"},{"location":"commands/gemini.html#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"commands/gemini.html#chaining-prompts","title":"Chaining Prompts","text":"<p>Building on previous responses for iterative development:</p> <pre><code># First, generate a basic implementation\ncursor-utils gemini \"Write a Python function to convert Celsius to Fahrenheit\" &gt; temperature.py\n\n# Then, improve the implementation\ncursor-utils gemini \"Improve this function to include error handling and type checking: $(cat temperature.py)\" &gt; temperature_improved.py\n</code></pre>"},{"location":"commands/gemini.html#structured-output","title":"Structured Output","text":"<p>Request structured data for programmatic use:</p> <pre><code>cursor-utils gemini --format json \"Convert this email to JSON with fields for sender, date, subject, and body: ...\"\n</code></pre>"},{"location":"commands/gemini.html#redirecting-output","title":"Redirecting Output","text":"<p>Save output to files:</p> <pre><code>cursor-utils gemini --format markdown \"Write documentation for GraphQL mutations\" &gt; graphql-mutations.md\n</code></pre>"},{"location":"commands/gemini.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific: More specific prompts yield better results    <pre><code># Less effective\ncursor-utils gemini \"Write a function\"\n\n# More effective\ncursor-utils gemini \"Write a Python function that validates email addresses using regex\"\n</code></pre></p> </li> <li> <p>Consider Model Selection: Choose the appropriate model for your task</p> </li> <li>Use <code>gemini-1.5-pro</code> for complex reasoning, detailed responses</li> <li> <p>Use <code>gemini-2.0-flash</code> for quick, simple tasks</p> </li> <li> <p>Tune Temperature: Adjust based on your need for creativity vs. determinism</p> </li> <li>Lower temperature (0.1-0.4) for factual, consistent responses</li> <li> <p>Higher temperature (0.7-0.9) for creative, varied responses</p> </li> <li> <p>Use System Instructions: Guide the model's behavior using system instructions    <pre><code>cursor-utils gemini --system \"You are a Python expert who writes well-documented, PEP 8 compliant code\" \"...\"\n</code></pre></p> </li> <li> <p>Format for Readability: Use markdown for documentation, rich for interactive use    <pre><code>cursor-utils gemini --format markdown \"Generate a tutorial on async/await in JavaScript\"\n</code></pre></p> </li> </ol>"},{"location":"commands/gemini.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/gemini.html#api-key-issues","title":"API Key Issues","text":"<p>If you receive authentication errors:</p> <pre><code>Error: Invalid API key\n</code></pre> <p>Verify your API key is correctly set:</p> <pre><code>cursor-utils config get gemini_api_key\n</code></pre> <p>If it's missing or incorrect, set it:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre>"},{"location":"commands/gemini.html#model-availability","title":"Model Availability","text":"<p>If you receive an error about model availability:</p> <pre><code>Error: Model [model_name] is not available\n</code></pre> <p>Try using a different model:</p> <pre><code>cursor-utils gemini --model gemini-1.5-pro \"Your prompt\"\n</code></pre>"},{"location":"commands/gemini.html#rate-limiting","title":"Rate Limiting","text":"<p>If you encounter rate limiting:</p> <pre><code>Error: Rate limit exceeded\n</code></pre> <p>Wait a few minutes and try again, or check your API usage limits.</p>"},{"location":"commands/gemini.html#timeout-issues","title":"Timeout Issues","text":"<p>For complex prompts that time out:</p> <pre><code>Error: Request timed out\n</code></pre> <p>Try simplifying your prompt or breaking it into smaller parts. </p>"},{"location":"commands/github.html","title":"github","text":""},{"location":"commands/github.html#github-command","title":"GitHub Command","text":"<p>The <code>github</code> command provides a suite of tools for interacting with GitHub repositories directly from the terminal, enabling efficient repository management, issue tracking, and pull request handling without switching to a browser.</p>"},{"location":"commands/github.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils github SUBCOMMAND [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#subcommands","title":"Subcommands","text":"Subcommand Description Syntax <code>repo</code> Get repository information <code>cursor-utils github repo [OPTIONS]</code> <code>issues</code> List repository issues <code>cursor-utils github issues [OPTIONS]</code> <code>prs</code> List repository pull requests <code>cursor-utils github prs [OPTIONS]</code> <code>create-issue</code> Create a new issue <code>cursor-utils github create-issue [OPTIONS]</code> <code>create-pr</code> Create a new pull request <code>cursor-utils github create-pr [OPTIONS]</code> <code>help</code> Show GitHub command help <code>cursor-utils github help [SUBCOMMAND]</code>"},{"location":"commands/github.html#common-options","title":"Common Options","text":"<p>These options apply to most GitHub subcommands:</p> Option Description Default Example <code>--owner</code> Repository owner (username or organization) None (Required) <code>--owner microsoft</code> <code>--repo</code> Repository name None (Required) <code>--repo vscode</code> <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format json</code> <code>--help</code> Show subcommand help - <code>--help</code>"},{"location":"commands/github.html#configuration","title":"Configuration","text":"<p>Before using the <code>github</code> command, you need to set up your GitHub personal access token:</p> <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre> <p>You can create a personal access token at GitHub Settings &gt; Developer settings &gt; Personal access tokens. Ensure your token has the appropriate scopes for the operations you want to perform.</p>"},{"location":"commands/github.html#subcommand-details","title":"Subcommand Details","text":""},{"location":"commands/github.html#repository-information-repo","title":"Repository Information (<code>repo</code>)","text":"<p>Get detailed information about a GitHub repository.</p>"},{"location":"commands/github.html#syntax_1","title":"Syntax","text":"<pre><code>cursor-utils github repo --owner OWNER --repo REPO [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#options","title":"Options","text":"Option Description Default Example <code>--owner</code> Repository owner None (Required) <code>--owner microsoft</code> <code>--repo</code> Repository name None (Required) <code>--repo vscode</code> <code>--format</code> Output format <code>rich</code> <code>--format json</code>"},{"location":"commands/github.html#example","title":"Example","text":"<pre><code>cursor-utils github repo --owner microsoft --repo vscode\n</code></pre>"},{"location":"commands/github.html#list-issues-issues","title":"List Issues (<code>issues</code>)","text":"<p>List issues in a GitHub repository with filtering options.</p>"},{"location":"commands/github.html#syntax_2","title":"Syntax","text":"<pre><code>cursor-utils github issues --owner OWNER --repo REPO [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#options_1","title":"Options","text":"Option Description Default Example <code>--owner</code> Repository owner None (Required) <code>--owner microsoft</code> <code>--repo</code> Repository name None (Required) <code>--repo vscode</code> <code>--state</code> Issue state (open, closed, all) <code>open</code> <code>--state closed</code> <code>--limit</code> Maximum number of issues to return <code>10</code> <code>--limit 20</code> <code>--labels</code> Filter by labels (comma-separated) None <code>--labels bug,enhancement</code> <code>--assignee</code> Filter by assignee None <code>--assignee username</code> <code>--format</code> Output format <code>rich</code> <code>--format markdown</code>"},{"location":"commands/github.html#examples","title":"Examples","text":"<p>List open issues:</p> <pre><code>cursor-utils github issues --owner microsoft --repo vscode\n</code></pre> <p>List closed issues with specific labels:</p> <pre><code>cursor-utils github issues --owner microsoft --repo vscode --state closed --labels bug,critical\n</code></pre>"},{"location":"commands/github.html#list-pull-requests-prs","title":"List Pull Requests (<code>prs</code>)","text":"<p>List pull requests in a GitHub repository with filtering options.</p>"},{"location":"commands/github.html#syntax_3","title":"Syntax","text":"<pre><code>cursor-utils github prs --owner OWNER --repo REPO [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#options_2","title":"Options","text":"Option Description Default Example <code>--owner</code> Repository owner None (Required) <code>--owner microsoft</code> <code>--repo</code> Repository name None (Required) <code>--repo vscode</code> <code>--state</code> PR state (open, closed, all) <code>open</code> <code>--state closed</code> <code>--limit</code> Maximum number of PRs to return <code>10</code> <code>--limit 20</code> <code>--base</code> Base branch filter None <code>--base main</code> <code>--head</code> Head branch filter None <code>--head feature-branch</code> <code>--format</code> Output format <code>rich</code> <code>--format json</code>"},{"location":"commands/github.html#examples_1","title":"Examples","text":"<p>List open pull requests:</p> <pre><code>cursor-utils github prs --owner microsoft --repo vscode\n</code></pre> <p>List PRs for a specific branch:</p> <pre><code>cursor-utils github prs --owner microsoft --repo vscode --head feature-branch\n</code></pre>"},{"location":"commands/github.html#create-issue-create-issue","title":"Create Issue (<code>create-issue</code>)","text":"<p>Create a new issue in a GitHub repository.</p>"},{"location":"commands/github.html#syntax_4","title":"Syntax","text":"<pre><code>cursor-utils github create-issue --owner OWNER --repo REPO --title TITLE [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#options_3","title":"Options","text":"Option Description Default Example <code>--owner</code> Repository owner None (Required) <code>--owner your-username</code> <code>--repo</code> Repository name None (Required) <code>--repo your-repo</code> <code>--title</code> Issue title None (Required) <code>--title \"Bug: Application crashes\"</code> <code>--body</code> Issue body/description None <code>--body \"The application crashes when...\"</code> <code>--labels</code> Issue labels (comma-separated) None <code>--labels bug,critical</code> <code>--assignees</code> Assignees (comma-separated) None <code>--assignees username1,username2</code> <code>--format</code> Output format <code>rich</code> <code>--format json</code>"},{"location":"commands/github.html#examples_2","title":"Examples","text":"<p>Create a simple issue:</p> <pre><code>cursor-utils github create-issue --owner your-username --repo your-repo --title \"Bug: Login page not working\"\n</code></pre> <p>Create a detailed issue with labels and assignees:</p> <pre><code>cursor-utils github create-issue --owner your-username --repo your-repo --title \"Feature Request: Dark Mode\" --body \"Please add dark mode support to improve accessibility and user experience.\" --labels enhancement,ui --assignees ui-team\n</code></pre>"},{"location":"commands/github.html#create-pull-request-create-pr","title":"Create Pull Request (<code>create-pr</code>)","text":"<p>Create a new pull request in a GitHub repository.</p>"},{"location":"commands/github.html#syntax_5","title":"Syntax","text":"<pre><code>cursor-utils github create-pr --owner OWNER --repo REPO --title TITLE --head HEAD --base BASE [OPTIONS]\n</code></pre>"},{"location":"commands/github.html#options_4","title":"Options","text":"Option Description Default Example <code>--owner</code> Repository owner None (Required) <code>--owner your-username</code> <code>--repo</code> Repository name None (Required) <code>--repo your-repo</code> <code>--title</code> PR title None (Required) <code>--title \"Add dark mode\"</code> <code>--head</code> Head branch None (Required) <code>--head feature-branch</code> <code>--base</code> Base branch None (Required) <code>--base main</code> <code>--body</code> PR description None <code>--body \"This PR implements...\"</code> <code>--draft</code> Mark as draft PR <code>false</code> <code>--draft</code> <code>--reviewers</code> Requested reviewers (comma-separated) None <code>--reviewers username1,username2</code> <code>--format</code> Output format <code>rich</code> <code>--format json</code>"},{"location":"commands/github.html#examples_3","title":"Examples","text":"<p>Create a simple pull request:</p> <pre><code>cursor-utils github create-pr --owner your-username --repo your-repo --title \"Fix login bug\" --head bugfix-login --base main\n</code></pre> <p>Create a detailed draft pull request with reviewers:</p> <pre><code>cursor-utils github create-pr --owner your-username --repo your-repo --title \"Implement dark mode\" --head feature-dark-mode --base develop --body \"This PR implements dark mode according to the design specs in issue #42.\" --draft --reviewers design-lead,frontend-lead\n</code></pre>"},{"location":"commands/github.html#use-cases","title":"Use Cases","text":""},{"location":"commands/github.html#repository-management","title":"Repository Management","text":"<ul> <li> <p>Quickly check repository information:   <pre><code>cursor-utils github repo --owner microsoft --repo vscode\n</code></pre></p> </li> <li> <p>Monitor open issues and PRs:   <pre><code>cursor-utils github issues --owner your-username --repo your-repo\ncursor-utils github prs --owner your-username --repo your-repo\n</code></pre></p> </li> </ul>"},{"location":"commands/github.html#issue-tracking","title":"Issue Tracking","text":"<ul> <li> <p>Find specific issues:   <pre><code>cursor-utils github issues --owner facebook --repo react --labels bug,high-priority\n</code></pre></p> </li> <li> <p>Create issues from the terminal:   <pre><code>cursor-utils github create-issue --owner your-username --repo your-repo --title \"Bug: Form validation fails\" --labels bug\n</code></pre></p> </li> </ul>"},{"location":"commands/github.html#pull-request-workflow","title":"Pull Request Workflow","text":"<ul> <li> <p>Check PR status:   <pre><code>cursor-utils github prs --owner your-username --repo your-repo --state open\n</code></pre></p> </li> <li> <p>Create a PR after completing a feature:   <pre><code>cursor-utils github create-pr --owner your-username --repo your-repo --title \"Add user settings page\" --head feature-user-settings --base main\n</code></pre></p> </li> </ul>"},{"location":"commands/github.html#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"commands/github.html#complex-filtering","title":"Complex Filtering","text":"<p>Combine multiple filters for precise results:</p> <pre><code>cursor-utils github issues --owner kubernetes --repo kubernetes --state open --labels bug,critical --limit 50\n</code></pre>"},{"location":"commands/github.html#output-processing","title":"Output Processing","text":"<p>Use with other command-line tools for further processing:</p> <pre><code># Extract issue numbers and titles\ncursor-utils github issues --owner microsoft --repo vscode --format json | jq '.[] | {number: .number, title: .title}'\n</code></pre>"},{"location":"commands/github.html#automation","title":"Automation","text":"<p>Use in scripts for automation:</p> <pre><code>#!/bin/bash\n\n# Generate changelog and create a release PR\nCHANGES=$(cursor-utils gemini \"Generate a changelog for the features and fixes in the following commits: $(git log --oneline origin/main..HEAD)\")\n\ncursor-utils github create-pr --owner your-username --repo your-repo --title \"Release v1.2.0\" --head develop --base main --body \"$CHANGES\"\n</code></pre>"},{"location":"commands/github.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Authentication: Always set up your GitHub token for full functionality    <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre></p> </li> <li> <p>Be Specific with Filters: Use filters to reduce noise in issue/PR listings    <pre><code>cursor-utils github issues --owner facebook --repo react --labels bug --state open\n</code></pre></p> </li> <li> <p>Choose Appropriate Output Format: </p> </li> <li>Use <code>rich</code> for interactive use</li> <li>Use <code>json</code> for scripting and automation</li> <li> <p>Use <code>markdown</code> for documentation</p> </li> <li> <p>Create Detailed Issues/PRs: Include sufficient context in issues and PRs    <pre><code>cursor-utils github create-issue --title \"Bug: Login fails\" --body \"Steps to reproduce:\\n1. Navigate to login page\\n2. Enter valid credentials\\n3. Click submit\\n\\nExpected: User is logged in\\nActual: Error 500 is displayed\"\n</code></pre></p> </li> <li> <p>Link Related Resources: Reference issues in PRs and vice versa    <pre><code>cursor-utils github create-pr --title \"Fix for login bug\" --body \"Resolves #42\"\n</code></pre></p> </li> </ol>"},{"location":"commands/github.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/github.html#authentication-issues","title":"Authentication Issues","text":"<p>If you receive authentication errors:</p> <pre><code>Error: Authentication failed\n</code></pre> <p>Verify your GitHub token is correctly set:</p> <pre><code>cursor-utils config get github_token\n</code></pre> <p>If it's missing or incorrect, set it:</p> <pre><code>cursor-utils config set github_token YOUR_GITHUB_TOKEN\n</code></pre>"},{"location":"commands/github.html#permission-issues","title":"Permission Issues","text":"<p>If you receive permission errors:</p> <pre><code>Error: You don't have permission to perform this action\n</code></pre> <p>Ensure your GitHub token has the appropriate scopes: - For repository access: <code>repo</code> scope - For creating issues: <code>repo</code> scope - For creating PRs: <code>repo</code> scope - For public repositories only: <code>public_repo</code> scope</p>"},{"location":"commands/github.html#rate-limiting","title":"Rate Limiting","text":"<p>If you encounter rate limiting:</p> <pre><code>Error: API rate limit exceeded\n</code></pre> <p>GitHub has rate limits on API usage. Wait until the rate limit resets or use a token with higher limits.</p>"},{"location":"commands/github.html#repository-not-found","title":"Repository Not Found","text":"<p>If you receive a repository not found error:</p> <pre><code>Error: Repository not found\n</code></pre> <p>Verify the owner and repository name are correct:</p> <pre><code>cursor-utils github repo --owner correct-username --repo correct-repo-name\n</code></pre> <p>Also ensure your token has access to the specified repository. </p>"},{"location":"commands/project.html","title":"project","text":""},{"location":"commands/project.html#project-command","title":"Project Command","text":"<p>The <code>project</code> command analyzes local project code using Google's Gemini AI to provide insights, context, and answers about your codebase directly from the terminal.</p>"},{"location":"commands/project.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils project [OPTIONS] PROJECT_PATH QUERY\n</code></pre>"},{"location":"commands/project.html#arguments","title":"Arguments","text":"Argument Description Required Example <code>PROJECT_PATH</code> Path to the project directory Yes <code>./</code> or <code>/path/to/project</code> <code>QUERY</code> The question or analysis request about the project Yes \"Explain the main components\""},{"location":"commands/project.html#options","title":"Options","text":"Option Description Default Example <code>--model</code> The Gemini model to use <code>gemini-1.5-pro</code> <code>--model gemini-2.0-pro-exp</code> <code>--max-files</code> Maximum number of files to include in analysis <code>30</code> <code>--max-files 50</code> <code>--ignore</code> Patterns to ignore (comma-separated) <code>.git,node_modules,dist</code> <code>--ignore \"build,*.log\"</code> <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format markdown</code> <code>--debug/--no-debug</code> Enable/disable debug output <code>--no-debug</code> <code>--debug</code> <code>--help</code> Show command help - <code>--help</code>"},{"location":"commands/project.html#configuration","title":"Configuration","text":"<p>Before using the <code>project</code> command, you need to set up your Google Gemini API key:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre> <p>You can obtain an API key from Google AI Studio.</p>"},{"location":"commands/project.html#examples","title":"Examples","text":""},{"location":"commands/project.html#basic-usage","title":"Basic Usage","text":"<p>Analyze the current project:</p> <pre><code>cursor-utils project . \"Explain the main architecture\"\n</code></pre> <p>Analyze a specific project directory:</p> <pre><code>cursor-utils project /path/to/project \"How does error handling work?\"\n</code></pre>"},{"location":"commands/project.html#using-different-models","title":"Using Different Models","text":"<p>Use a specific model for more complex analysis:</p> <pre><code>cursor-utils project . --model gemini-2.0-pro-exp \"Identify potential security vulnerabilities\"\n</code></pre>"},{"location":"commands/project.html#limiting-analysis-scope","title":"Limiting Analysis Scope","text":"<p>Limit the number of files analyzed:</p> <pre><code>cursor-utils project . --max-files 20 \"Explain the authentication system\"\n</code></pre> <p>Ignore specific paths or patterns:</p> <pre><code>cursor-utils project . --ignore \"tests,*.spec.js,dist\" \"Analyze the core business logic\"\n</code></pre>"},{"location":"commands/project.html#output-formats","title":"Output Formats","text":"<p>Save analysis results as markdown:</p> <pre><code>cursor-utils project . --format markdown \"Document the API endpoints\" &gt; api-documentation.md\n</code></pre> <p>Get structured JSON output:</p> <pre><code>cursor-utils project . --format json \"List all React components\"\n</code></pre>"},{"location":"commands/project.html#debug-mode","title":"Debug Mode","text":"<p>Enable debug output for troubleshooting:</p> <pre><code>cursor-utils project . --debug \"Why is the application crashing on startup?\"\n</code></pre>"},{"location":"commands/project.html#use-cases","title":"Use Cases","text":""},{"location":"commands/project.html#code-understanding","title":"Code Understanding","text":"<ul> <li> <p>Get a high-level overview of an unfamiliar codebase:   <pre><code>cursor-utils project /path/to/new-project \"Explain the main components and how they interact\"\n</code></pre></p> </li> <li> <p>Understand specific parts of a codebase:   <pre><code>cursor-utils project . \"How does the authentication system work?\"\n</code></pre></p> </li> <li> <p>Analyze data flow:   <pre><code>cursor-utils project . \"Trace the data flow from API request to database\"\n</code></pre></p> </li> </ul>"},{"location":"commands/project.html#architecture-analysis","title":"Architecture Analysis","text":"<ul> <li> <p>Identify architectural patterns:   <pre><code>cursor-utils project . \"What design patterns are used in this codebase?\"\n</code></pre></p> </li> <li> <p>Analyze dependency structure:   <pre><code>cursor-utils project . \"Map out the dependency graph between modules\"\n</code></pre></p> </li> <li> <p>Review system architecture:   <pre><code>cursor-utils project . \"Evaluate the microservice architecture and suggest improvements\"\n</code></pre></p> </li> </ul>"},{"location":"commands/project.html#code-quality-and-improvements","title":"Code Quality and Improvements","text":"<ul> <li> <p>Identify potential issues:   <pre><code>cursor-utils project . \"Find potential performance bottlenecks\"\n</code></pre></p> </li> <li> <p>Suggest improvements:   <pre><code>cursor-utils project . \"How can error handling be improved?\"\n</code></pre></p> </li> <li> <p>Review security:   <pre><code>cursor-utils project . \"Identify security vulnerabilities in the authentication system\"\n</code></pre></p> </li> </ul>"},{"location":"commands/project.html#documentation","title":"Documentation","text":"<ul> <li> <p>Generate documentation:   <pre><code>cursor-utils project . --format markdown \"Document the public API endpoints\" &gt; api-docs.md\n</code></pre></p> </li> <li> <p>Create architecture diagrams:   <pre><code>cursor-utils project . \"Create a component diagram for the frontend\"\n</code></pre></p> </li> <li> <p>Document workflows:   <pre><code>cursor-utils project . \"Document the user registration flow\"\n</code></pre></p> </li> </ul>"},{"location":"commands/project.html#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"commands/project.html#focused-analysis","title":"Focused Analysis","text":"<p>Focus on specific directories or components:</p> <pre><code># Analyze just the backend code\ncursor-utils project ./backend \"Explain the database schema and relationships\"\n\n# Focus on a specific feature\ncursor-utils project ./src/features/authentication \"Review the authentication implementation\"\n</code></pre>"},{"location":"commands/project.html#comparative-analysis","title":"Comparative Analysis","text":"<p>Compare different parts of the codebase:</p> <pre><code>cursor-utils project . \"Compare the user and admin authentication flows\"\n</code></pre>"},{"location":"commands/project.html#sequential-analysis","title":"Sequential Analysis","text":"<p>Build up understanding through sequential queries:</p> <pre><code># Start with high-level overview\ncursor-utils project . \"Provide an overview of the main components\"\n\n# Then dig deeper into specific areas\ncursor-utils project . \"Explain the data access layer in detail\"\ncursor-utils project . \"How is caching implemented in the data access layer?\"\n</code></pre>"},{"location":"commands/project.html#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Use during code reviews:</p> <pre><code>git diff main... | cursor-utils project . \"Review these changes and suggest improvements\"\n</code></pre> <p>Use for onboarding:</p> <pre><code>cursor-utils project . \"Create an onboarding guide for new developers\" &gt; onboarding.md\n</code></pre>"},{"location":"commands/project.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start with Broad Questions: Get a high-level overview before diving into details    <pre><code>cursor-utils project . \"What are the main components and their responsibilities?\"\n</code></pre></p> </li> <li> <p>Be Specific with Follow-ups: Ask targeted questions for deeper understanding    <pre><code>cursor-utils project . \"How does the JWT authentication validation work?\"\n</code></pre></p> </li> <li> <p>Limit Scope When Necessary: For large projects, focus on specific areas    <pre><code>cursor-utils project ./src/core --max-files 15 \"Explain the core business logic\"\n</code></pre></p> </li> <li> <p>Use for Documentation: Generate documentation as you explore the codebase    <pre><code>cursor-utils project . --format markdown \"Document the state management approach\" &gt; state-management.md\n</code></pre></p> </li> <li> <p>Combine with Manual Review: Use AI analysis as a complement to manual code review    <pre><code># AI overview first\ncursor-utils project ./src/auth \"Explain the authentication system\"\n\n# Then manual review of key files identified by the AI\n</code></pre></p> </li> <li> <p>Save Analysis Results: Preserve insights for future reference    <pre><code>cursor-utils project . --format markdown \"Architectural overview\" &gt; architecture.md\n</code></pre></p> </li> </ol>"},{"location":"commands/project.html#performance-considerations","title":"Performance Considerations","text":""},{"location":"commands/project.html#large-codebases","title":"Large Codebases","text":"<p>For large codebases, consider:</p> <ol> <li> <p>Increasing max-files limit for broader coverage:    <pre><code>cursor-utils project . --max-files 100 \"Provide a comprehensive overview\"\n</code></pre></p> </li> <li> <p>Focusing on specific directories for targeted analysis:    <pre><code>cursor-utils project ./src/core \"Analyze the core modules\"\n</code></pre></p> </li> <li> <p>Using ignore patterns to exclude irrelevant files:    <pre><code>cursor-utils project . --ignore \"tests,*.test.js,node_modules,build,dist\" \"Analyze business logic\"\n</code></pre></p> </li> </ol>"},{"location":"commands/project.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/project.html#api-key-issues","title":"API Key Issues","text":"<p>If you receive authentication errors:</p> <pre><code>Error: Invalid API key\n</code></pre> <p>Verify your API key is correctly set:</p> <pre><code>cursor-utils config get gemini_api_key\n</code></pre> <p>If it's missing or incorrect, set it:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre>"},{"location":"commands/project.html#project-path-issues","title":"Project Path Issues","text":"<p>If the project path is not found:</p> <pre><code>Error: Project path not found\n</code></pre> <p>Verify the path exists and is accessible:</p> <pre><code>ls -la /path/to/project\n</code></pre>"},{"location":"commands/project.html#context-size-limitations","title":"Context Size Limitations","text":"<p>If you receive an error about context size:</p> <pre><code>Error: Context size limit exceeded\n</code></pre> <p>Try reducing the number of files analyzed:</p> <pre><code>cursor-utils project . --max-files 10 \"Your query\"\n</code></pre> <p>Or focus on a specific subdirectory:</p> <pre><code>cursor-utils project ./src/specific-feature \"Your query\"\n</code></pre>"},{"location":"commands/project.html#vague-or-confusing-results","title":"Vague or Confusing Results","text":"<p>If the analysis results are vague or confusing:</p> <ol> <li>Try being more specific with your query</li> <li>Use debug mode to see what files are being analyzed:    <pre><code>cursor-utils project . --debug \"Your query\"\n</code></pre></li> <li>Adjust the ignore patterns to focus on relevant files </li> </ol>"},{"location":"commands/repo.html","title":"repo","text":""},{"location":"commands/repo.html#repo-command","title":"Repo Command","text":"<p>The <code>repo</code> command analyzes and queries remote code repositories using Google's Gemini AI, allowing you to understand, explore, and extract insights from any public Git repository without cloning it manually.</p>"},{"location":"commands/repo.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils repo [OPTIONS] REPO_URL QUERY\n</code></pre>"},{"location":"commands/repo.html#arguments","title":"Arguments","text":"Argument Description Required Example <code>REPO_URL</code> URL of the Git repository Yes <code>https://github.com/org/repo</code> <code>QUERY</code> The question or analysis request about the repository Yes \"Explain the architecture\""},{"location":"commands/repo.html#options","title":"Options","text":"Option Description Default Example <code>--branch</code> The branch to analyze <code>main</code> or <code>master</code> <code>--branch develop</code> <code>--depth</code> The clone depth (number of commits) <code>1</code> <code>--depth 10</code> <code>--max-files</code> Maximum number of files to include in analysis <code>30</code> <code>--max-files 50</code> <code>--model</code> The Gemini model to use <code>gemini-1.5-pro</code> <code>--model gemini-2.0-pro-exp</code> <code>--ignore</code> Patterns to ignore (comma-separated) <code>.git,node_modules,dist</code> <code>--ignore \"build,*.log\"</code> <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format markdown</code> <code>--debug/--no-debug</code> Enable/disable debug output <code>--no-debug</code> <code>--debug</code> <code>--help</code> Show command help - <code>--help</code>"},{"location":"commands/repo.html#configuration","title":"Configuration","text":"<p>Before using the <code>repo</code> command, you need to set up your Google Gemini API key:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre> <p>You can obtain an API key from Google AI Studio.</p>"},{"location":"commands/repo.html#examples","title":"Examples","text":""},{"location":"commands/repo.html#basic-usage","title":"Basic Usage","text":"<p>Analyze a GitHub repository:</p> <pre><code>cursor-utils repo https://github.com/facebook/react \"Explain the core architecture\"\n</code></pre> <p>Analyze a GitLab repository:</p> <pre><code>cursor-utils repo https://gitlab.com/organization/project \"How does error handling work?\"\n</code></pre>"},{"location":"commands/repo.html#specifying-branches","title":"Specifying Branches","text":"<p>Analyze a specific branch:</p> <pre><code>cursor-utils repo https://github.com/facebook/react --branch experimental \"What are the new experimental features?\"\n</code></pre>"},{"location":"commands/repo.html#clone-depth","title":"Clone Depth","text":"<p>Adjust clone depth for repositories with relevant history:</p> <pre><code>cursor-utils repo https://github.com/tensorflow/tensorflow --depth 5 \"How has the API evolved recently?\"\n</code></pre>"},{"location":"commands/repo.html#limiting-analysis-scope","title":"Limiting Analysis Scope","text":"<p>Limit the number of files analyzed:</p> <pre><code>cursor-utils repo https://github.com/kubernetes/kubernetes --max-files 50 \"Explain the core scheduling algorithm\"\n</code></pre> <p>Ignore specific files or patterns:</p> <pre><code>cursor-utils repo https://github.com/django/django --ignore \"docs,tests,*.md\" \"Explain the ORM implementation\"\n</code></pre>"},{"location":"commands/repo.html#output-formats","title":"Output Formats","text":"<p>Save analysis results as markdown:</p> <pre><code>cursor-utils repo https://github.com/expressjs/express --format markdown \"Document the middleware system\" &gt; express-middleware.md\n</code></pre> <p>Get structured JSON output:</p> <pre><code>cursor-utils repo https://github.com/vuejs/vue --format json \"List key components and their purposes\"\n</code></pre>"},{"location":"commands/repo.html#using-different-models","title":"Using Different Models","text":"<p>Use a specific model for more complex analysis:</p> <pre><code>cursor-utils repo https://github.com/rust-lang/rust --model gemini-2.0-pro-exp \"Explain the ownership system\"\n</code></pre>"},{"location":"commands/repo.html#debug-mode","title":"Debug Mode","text":"<p>Enable debug output for troubleshooting:</p> <pre><code>cursor-utils repo https://github.com/pytorch/pytorch --debug \"How does autograd work?\"\n</code></pre>"},{"location":"commands/repo.html#use-cases","title":"Use Cases","text":""},{"location":"commands/repo.html#open-source-exploration","title":"Open Source Exploration","text":"<ul> <li> <p>Understand popular frameworks:   <pre><code>cursor-utils repo https://github.com/angular/angular \"Explain the dependency injection system\"\n</code></pre></p> </li> <li> <p>Explore new libraries before adopting:   <pre><code>cursor-utils repo https://github.com/new-library/new-library \"What are the main features and limitations?\"\n</code></pre></p> </li> <li> <p>Learn best practices from well-maintained projects:   <pre><code>cursor-utils repo https://github.com/pallets/flask \"Explain the extension system and patterns\"\n</code></pre></p> </li> </ul>"},{"location":"commands/repo.html#dependency-evaluation","title":"Dependency Evaluation","text":"<ul> <li> <p>Evaluate dependencies before integration:   <pre><code>cursor-utils repo https://github.com/dependency/project \"What is the API stability commitment?\"\n</code></pre></p> </li> <li> <p>Assess security practices:   <pre><code>cursor-utils repo https://github.com/auth-library/library \"Review the security implementation\"\n</code></pre></p> </li> <li> <p>Check implementation quality:   <pre><code>cursor-utils repo https://github.com/utility/library \"Analyze code quality and test coverage\"\n</code></pre></p> </li> </ul>"},{"location":"commands/repo.html#learning-and-research","title":"Learning and Research","text":"<ul> <li> <p>Study implementation techniques:   <pre><code>cursor-utils repo https://github.com/redis/redis \"How does the event loop work?\"\n</code></pre></p> </li> <li> <p>Understand algorithms:   <pre><code>cursor-utils repo https://github.com/tensorflow/tensorflow \"Explain the gradient descent implementation\"\n</code></pre></p> </li> <li> <p>Research architecture patterns:   <pre><code>cursor-utils repo https://github.com/nestjs/nest \"Explain the module system and architecture\"\n</code></pre></p> </li> </ul>"},{"location":"commands/repo.html#technical-decision-making","title":"Technical Decision Making","text":"<ul> <li> <p>Compare implementations:   <pre><code>cursor-utils repo https://github.com/ORG1/implementation \"How is feature X implemented?\"\ncursor-utils repo https://github.com/ORG2/implementation \"How is feature X implemented?\"\n</code></pre></p> </li> <li> <p>Evaluate migration paths:   <pre><code>cursor-utils repo https://github.com/framework/next-version \"What breaking changes are in this version?\"\n</code></pre></p> </li> </ul>"},{"location":"commands/repo.html#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"commands/repo.html#focused-analysis","title":"Focused Analysis","text":"<p>Target specific directories for focused analysis:</p> <pre><code># Analyze just the authentication module\ncursor-utils repo https://github.com/org/repo --branch main \"Analyze the code in src/auth directory\"\n</code></pre>"},{"location":"commands/repo.html#comparative-analysis","title":"Comparative Analysis","text":"<p>Compare different repositories:</p> <pre><code># Compare ORM implementations\ncursor-utils repo https://github.com/sequelize/sequelize \"Explain the query building system\"\ncursor-utils repo https://github.com/typeorm/typeorm \"Explain the query building system\"\n</code></pre> <p>Compare different versions or branches:</p> <pre><code># Compare approaches in different branches\ncursor-utils repo https://github.com/org/repo --branch main \"How is feature X implemented?\"\ncursor-utils repo https://github.com/org/repo --branch experimental \"How is feature X implemented?\"\n</code></pre>"},{"location":"commands/repo.html#sequential-deep-dives","title":"Sequential Deep Dives","text":"<p>Build understanding through sequential queries:</p> <pre><code># Start with architecture overview\ncursor-utils repo https://github.com/nestjs/nest \"Provide an architectural overview\"\n\n# Dive deeper into specific areas\ncursor-utils repo https://github.com/nestjs/nest \"Explain the dependency injection system in detail\"\ncursor-utils repo https://github.com/nestjs/nest \"How does the middleware system work?\"\n</code></pre>"},{"location":"commands/repo.html#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Use for research during architectural decisions:</p> <pre><code># Research pattern implementations before deciding approach\ncursor-utils repo https://github.com/well-known/implementation \"How is the repository pattern implemented?\"\n</code></pre> <p>Use for learning before contribution:</p> <pre><code># Understand contribution guidelines and patterns\ncursor-utils repo https://github.com/project/to-contribute \"Explain the contribution workflow and standards\"\n</code></pre>"},{"location":"commands/repo.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific with Your Queries: More specific questions yield better results    <pre><code># Less effective\ncursor-utils repo https://github.com/org/repo \"How does it work?\"\n\n# More effective\ncursor-utils repo https://github.com/org/repo \"How does the authentication system handle JWT validation?\"\n</code></pre></p> </li> <li> <p>Limit Analysis Scope: For large repositories, focus on specific areas    <pre><code>cursor-utils repo https://github.com/kubernetes/kubernetes --max-files 40 \"Explain just the scheduler component\"\n</code></pre></p> </li> <li> <p>Choose Appropriate Branch: Analyze the relevant branch for your needs    <pre><code># For stable code\ncursor-utils repo https://github.com/org/repo --branch main \"Explain the core functionality\"\n\n# For upcoming features\ncursor-utils repo https://github.com/org/repo --branch develop \"What new features are being implemented?\"\n</code></pre></p> </li> <li> <p>Save Insights for Reference: Save valuable analyses for future reference    <pre><code>cursor-utils repo https://github.com/important/dependency --format markdown \"Document the API\" &gt; dependency-api.md\n</code></pre></p> </li> <li> <p>Follow Up with Specific Questions: Start broad, then ask targeted questions    <pre><code># First query\ncursor-utils repo https://github.com/org/repo \"What are the main components?\"\n\n# Follow-up query\ncursor-utils repo https://github.com/org/repo \"Explain how the caching system works in detail\"\n</code></pre></p> </li> <li> <p>Compare with Documentation: Validate analysis against official documentation    <pre><code>cursor-utils repo https://github.com/org/repo \"What does the code actually do vs. what the documentation claims?\"\n</code></pre></p> </li> </ol>"},{"location":"commands/repo.html#performance-considerations","title":"Performance Considerations","text":""},{"location":"commands/repo.html#repository-size","title":"Repository Size","text":"<p>For large repositories:</p> <ol> <li> <p>Limit clone depth to avoid downloading full history:    <pre><code>cursor-utils repo https://github.com/large/repo --depth 1 \"Analyze the core architecture\"\n</code></pre></p> </li> <li> <p>Limit the number of files analyzed:    <pre><code>cursor-utils repo https://github.com/large/repo --max-files 30 \"Focus on the authentication system\"\n</code></pre></p> </li> <li> <p>Ignore irrelevant directories:    <pre><code>cursor-utils repo https://github.com/large/repo --ignore \"docs,examples,tests,*.md\" \"Analyze core functionality\"\n</code></pre></p> </li> </ol>"},{"location":"commands/repo.html#network-considerations","title":"Network Considerations","text":"<ol> <li> <p>Enable debug mode to monitor cloning progress:    <pre><code>cursor-utils repo https://github.com/org/repo --debug \"Your query\"\n</code></pre></p> </li> <li> <p>Consider caching for repositories you analyze frequently:    Repositories are temporarily cached, which speeds up subsequent analyses of the same repository.</p> </li> </ol>"},{"location":"commands/repo.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/repo.html#repository-access-issues","title":"Repository Access Issues","text":"<p>If you have trouble accessing a repository:</p> <pre><code>Error: Failed to clone repository\n</code></pre> <p>Verify: 1. The repository URL is correct 2. The repository is public or you have access 3. Your network connection can reach the Git server</p>"},{"location":"commands/repo.html#api-key-issues","title":"API Key Issues","text":"<p>If you receive authentication errors:</p> <pre><code>Error: Invalid API key\n</code></pre> <p>Verify your API key is correctly set:</p> <pre><code>cursor-utils config get gemini_api_key\n</code></pre> <p>If it's missing or incorrect, set it:</p> <pre><code>cursor-utils config set gemini_api_key YOUR_GEMINI_API_KEY\n</code></pre>"},{"location":"commands/repo.html#context-size-limitations","title":"Context Size Limitations","text":"<p>If you receive an error about context size:</p> <pre><code>Error: Context size limit exceeded\n</code></pre> <p>Try reducing the number of files analyzed:</p> <pre><code>cursor-utils repo https://github.com/org/repo --max-files 15 \"Your query\"\n</code></pre>"},{"location":"commands/repo.html#branch-not-found","title":"Branch Not Found","text":"<p>If the specified branch doesn't exist:</p> <pre><code>Error: Branch not found\n</code></pre> <p>Check available branches and use the correct name:</p> <pre><code>git ls-remote --heads https://github.com/org/repo\ncursor-utils repo https://github.com/org/repo --branch correct-branch-name \"Your query\"\n</code></pre>"},{"location":"commands/repo.html#vague-or-confusing-results","title":"Vague or Confusing Results","text":"<p>If the analysis results are vague or confusing:</p> <ol> <li>Try being more specific with your query</li> <li>Use debug mode to see what files are being analyzed:    <pre><code>cursor-utils repo https://github.com/org/repo --debug \"Your query\"\n</code></pre></li> <li>Adjust the ignore patterns to focus on relevant files </li> </ol>"},{"location":"commands/web.html","title":"web","text":""},{"location":"commands/web.html#web-command","title":"Web Command","text":"<p>The <code>web</code> command performs intelligent web research using Perplexity AI, providing curated, up-to-date information from across the internet without requiring you to leave the terminal.</p>"},{"location":"commands/web.html#syntax","title":"Syntax","text":"<pre><code>cursor-utils web [OPTIONS] QUERY\n</code></pre>"},{"location":"commands/web.html#arguments","title":"Arguments","text":"Argument Description Required Example <code>QUERY</code> The search query to research Yes \"How to implement JWT authentication in Express\""},{"location":"commands/web.html#options","title":"Options","text":"Option Description Default Example <code>--model</code> The Perplexity model to use <code>sonar</code> <code>--model sonar-reasoning</code> <code>--format</code> Output format (plain, markdown, json, rich) <code>rich</code> <code>--format markdown</code> <code>--help</code> Show command help - <code>--help</code>"},{"location":"commands/web.html#available-models","title":"Available Models","text":"Model Description Best For <code>sonar</code> Standard search model General queries, basic information <code>sonar-pro</code> Enhanced search model More comprehensive results <code>sonar-reasoning</code> Model with reasoning capabilities Technical queries requiring analysis <code>sonar-reasoning-pro</code> Advanced reasoning model Complex technical questions, in-depth analysis"},{"location":"commands/web.html#configuration","title":"Configuration","text":"<p>Before using the <code>web</code> command, you need to set up your Perplexity API key:</p> <pre><code>cursor-utils config set perplexity_api_key YOUR_PERPLEXITY_API_KEY\n</code></pre> <p>You can obtain an API key from Perplexity API documentation.</p>"},{"location":"commands/web.html#examples","title":"Examples","text":""},{"location":"commands/web.html#basic-usage","title":"Basic Usage","text":"<p>Simple web search:</p> <pre><code>cursor-utils web \"What is Docker containerization?\"\n</code></pre>"},{"location":"commands/web.html#using-different-models","title":"Using Different Models","text":"<p>Use a specific model for more technical queries:</p> <pre><code>cursor-utils web --model sonar-reasoning \"Compare microservices vs. monolithic architecture\"\n</code></pre> <p>For complex topics requiring in-depth analysis:</p> <pre><code>cursor-utils web --model sonar-reasoning-pro \"Explain OAuth 2.0 security considerations\"\n</code></pre>"},{"location":"commands/web.html#different-output-formats","title":"Different Output Formats","text":"<p>Output in markdown format for documentation:</p> <pre><code>cursor-utils web --format markdown \"Best practices for React state management\"\n</code></pre> <p>Output in JSON format for programmatic use:</p> <pre><code>cursor-utils web --format json \"List HTTP status codes and meanings\"\n</code></pre>"},{"location":"commands/web.html#use-cases","title":"Use Cases","text":""},{"location":"commands/web.html#technical-research","title":"Technical Research","text":"<ul> <li> <p>Researching programming concepts:   <pre><code>cursor-utils web \"How does Redux middleware work?\"\n</code></pre></p> </li> <li> <p>Finding best practices:   <pre><code>cursor-utils web --model sonar-reasoning \"Best practices for securing Node.js applications\"\n</code></pre></p> </li> <li> <p>Comparing technologies:   <pre><code>cursor-utils web \"Compare PostgreSQL vs. MongoDB for web applications\"\n</code></pre></p> </li> </ul>"},{"location":"commands/web.html#problem-solving","title":"Problem Solving","text":"<ul> <li> <p>Debugging errors:   <pre><code>cursor-utils web \"Fix React useEffect infinite loop\"\n</code></pre></p> </li> <li> <p>Finding solutions to common issues:   <pre><code>cursor-utils web \"Resolve Docker networking between containers\"\n</code></pre></p> </li> </ul>"},{"location":"commands/web.html#learning","title":"Learning","text":"<ul> <li> <p>Understanding new technologies:   <pre><code>cursor-utils web --model sonar-reasoning \"Explain WebAssembly and its use cases\"\n</code></pre></p> </li> <li> <p>Following development trends:   <pre><code>cursor-utils web \"Latest developments in frontend frameworks 2023\"\n</code></pre></p> </li> </ul>"},{"location":"commands/web.html#documentation-and-examples","title":"Documentation and Examples","text":"<ul> <li> <p>Finding code examples:   <pre><code>cursor-utils web \"Example of using React context API with TypeScript\"\n</code></pre></p> </li> <li> <p>Looking up API documentation:   <pre><code>cursor-utils web \"How to use fetch API with async/await\"\n</code></pre></p> </li> </ul>"},{"location":"commands/web.html#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"commands/web.html#focused-queries","title":"Focused Queries","text":"<p>For more precise results, craft specific queries:</p> <pre><code># Less effective\ncursor-utils web \"React\"\n\n# More effective\ncursor-utils web \"React custom hooks for form validation best practices\"\n</code></pre>"},{"location":"commands/web.html#combining-with-other-tools","title":"Combining with Other Tools","text":"<p>Pipe results to other commands for further processing:</p> <pre><code># Extract code examples from the results\ncursor-utils web --format plain \"Python pandas dataframe filtering examples\" | grep -A 20 \"```python\" | grep -B 20 \"```\"\n</code></pre> <p>Save results to a file for later reference:</p> <pre><code>cursor-utils web --format markdown \"GraphQL schema design best practices\" &gt; graphql-best-practices.md\n</code></pre>"},{"location":"commands/web.html#iterative-research","title":"Iterative Research","text":"<p>Build on previous research with follow-up queries:</p> <pre><code># Start with a general topic\ncursor-utils web \"What is WebRTC?\"\n\n# Follow up with more specific questions\ncursor-utils web \"WebRTC NAT traversal techniques\"\ncursor-utils web \"Implementing WebRTC signaling server in Node.js\"\n</code></pre>"},{"location":"commands/web.html#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific: Frame your query with specific details for better results    <pre><code># Less effective\ncursor-utils web \"JavaScript testing\"\n\n# More effective\ncursor-utils web \"Unit testing React components with Jest and React Testing Library\"\n</code></pre></p> </li> <li> <p>Choose the Right Model: Select the appropriate model for your query type</p> </li> <li>Use <code>sonar</code> for general information</li> <li> <p>Use <code>sonar-reasoning</code> or <code>sonar-reasoning-pro</code> for technical topics requiring analysis</p> </li> <li> <p>Consider Output Format: Choose the format that best suits your needs</p> </li> <li>Use <code>markdown</code> for documentation</li> <li>Use <code>rich</code> for interactive terminal viewing</li> <li> <p>Use <code>json</code> for programmatic processing</p> </li> <li> <p>Check Information Freshness: Web information can become outdated    <pre><code>cursor-utils web \"Latest version of Node.js and its features\"\n</code></pre></p> </li> <li> <p>Verify Technical Solutions: Always validate solutions in your specific context    <pre><code>cursor-utils web \"How to fix memory leaks in React applications\"\n</code></pre></p> </li> </ol>"},{"location":"commands/web.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/web.html#api-key-issues","title":"API Key Issues","text":"<p>If you receive authentication errors:</p> <pre><code>Error: Invalid API key\n</code></pre> <p>Verify your API key is correctly set:</p> <pre><code>cursor-utils config get perplexity_api_key\n</code></pre> <p>If it's missing or incorrect, set it:</p> <pre><code>cursor-utils config set perplexity_api_key YOUR_PERPLEXITY_API_KEY\n</code></pre>"},{"location":"commands/web.html#model-availability","title":"Model Availability","text":"<p>If you receive an error about model availability:</p> <pre><code>Error: Model [model_name] is not available\n</code></pre> <p>Try using a different model:</p> <pre><code>cursor-utils web --model sonar \"Your query\"\n</code></pre>"},{"location":"commands/web.html#rate-limiting","title":"Rate Limiting","text":"<p>If you encounter rate limiting:</p> <pre><code>Error: Rate limit exceeded\n</code></pre> <p>Wait a few minutes and try again, or check your API usage limits.</p>"},{"location":"commands/web.html#no-results-found","title":"No Results Found","text":"<p>If your query returns limited or no results:</p> <pre><code>No relevant information found for your query\n</code></pre> <p>Try reformulating your query to be more specific or using different keywords. </p>"},{"location":"errors/index.html","title":"Common Errors","text":""},{"location":"errors/index.html#error-reference","title":"Error Reference","text":"<p>Cursor-Utils implements a structured error handling system that provides consistent error reporting, exit codes, and recovery mechanisms across all commands. This reference documents the error types, handling patterns, and how to interpret and troubleshoot errors.</p>"},{"location":"errors/index.html#error-types","title":"Error Types","text":"<p>Cursor-Utils defines a hierarchy of error types to handle different categories of issues:</p> Error Class Description Exit Code Use Cases <code>CommandError</code> Base class for all command errors 1 General command errors <code>ConfigError</code> Configuration-related errors 2 Missing API keys, invalid configuration <code>ServiceError</code> External service errors 3 API rate limits, network issues"},{"location":"errors/index.html#error-severity-levels","title":"Error Severity Levels","text":"<p>Errors are categorized by severity level:</p> Severity Description Typical Action <code>INFO</code> Informational message No action required <code>WARNING</code> Potential issue that doesn't prevent execution Consider addressing <code>ERROR</code> Issue that prevents successful execution Must be resolved to proceed <code>CRITICAL</code> Serious issue that could affect system stability Immediate action required"},{"location":"errors/index.html#exit-codes","title":"Exit Codes","text":"<p>Cursor-Utils uses standardized exit codes to indicate different types of failures:</p> Exit Code Meaning Example Scenario 0 Success Command completed successfully 1 General command error Invalid arguments, unexpected error 2 Configuration error Missing API key, invalid configuration file 3 Service error API rate limit exceeded, authentication failure 4 Input validation error Invalid input format or parameters <p>You can use these exit codes in shell scripts to handle errors programmatically:</p> <pre><code>cursor-utils web \"Python best practices\"\nif [ $? -eq 2 ]; then\n  echo \"Configuration error - please set up your API keys\"\n  cursor-utils config list\nfi\n</code></pre>"},{"location":"errors/index.html#common-error-patterns","title":"Common Error Patterns","text":""},{"location":"errors/index.html#api-key-errors","title":"API Key Errors","text":"<p>If you encounter configuration errors related to API keys:</p> <pre><code>Error: API key for Gemini not found in configuration\nHelp: Set your API key using: cursor-utils config set gemini_api_key YOUR_API_KEY\n</code></pre> <p>Resolution: 1. Obtain the appropriate API key from the service provider 2. Set the key using the <code>config</code> command:    <pre><code>cursor-utils config set gemini_api_key YOUR_API_KEY\n</code></pre></p>"},{"location":"errors/index.html#rate-limit-errors","title":"Rate Limit Errors","text":"<p>When external services impose rate limits:</p> <pre><code>Error: Rate limit exceeded for Perplexity API\nHelp: Please wait before making additional requests or upgrade your API tier\n</code></pre> <p>Resolution: 1. Wait before making additional requests 2. Consider upgrading your API tier 3. Implement request throttling in automation scripts</p>"},{"location":"errors/index.html#network-errors","title":"Network Errors","text":"<p>Issues connecting to external services:</p> <pre><code>Error: Unable to connect to GitHub API\nHelp: Check your network connection and try again\n</code></pre> <p>Resolution: 1. Verify your network connection 2. Check if the service is experiencing downtime 3. Try again later or check for proxy settings if applicable</p>"},{"location":"errors/index.html#error-handling-in-code","title":"Error Handling in Code","text":"<p>For developers extending Cursor-Utils, the error handling system provides a consistent pattern:</p> <ol> <li>Use the appropriate error class for different types of issues</li> <li>Include helpful error messages and guidance</li> <li>Leverage the <code>handle_command_errors</code> decorator for consistent handling</li> </ol> <p>Example of proper error handling in a command:</p> <pre><code>from cursor_utils.core.errors import ConfigError, handle_command_errors\n\n@handle_command_errors\ndef my_command(api_key=None):\n    if not api_key:\n        raise ConfigError(\n            message=\"API key not provided\",\n            help_text=\"Set your API key using: cursor-utils config set my_api_key YOUR_API_KEY\",\n            severity=ErrorSeverity.ERROR\n        )\n    # Rest of command implementation\n</code></pre>"},{"location":"errors/index.html#debug-mode","title":"Debug Mode","text":"<p>For more detailed error information, enable debug mode:</p> <pre><code>cursor-utils --debug web \"Python best practices\"\n</code></pre> <p>Debug mode provides: 1. Full stack traces for unexpected errors 2. Request and response details for API calls 3. Configuration and environment information</p>"},{"location":"errors/index.html#best-practices-for-error-handling","title":"Best Practices for Error Handling","text":"<ol> <li> <p>Check Configuration First: Many errors stem from configuration issues    <pre><code>cursor-utils config list\n</code></pre></p> </li> <li> <p>Verify API Keys: Ensure API keys are set correctly and not expired    <pre><code>cursor-utils config get gemini_api_key\n</code></pre></p> </li> <li> <p>Read Help Text: Error messages include specific guidance for resolution</p> </li> <li> <p>Start Simple: When troubleshooting, begin with simple commands to isolate issues    <pre><code>cursor-utils gemini \"Hello world\"\n</code></pre></p> </li> <li> <p>Check Service Status: For service errors, verify if the external service is operating normally </p> </li> </ol>"}]}